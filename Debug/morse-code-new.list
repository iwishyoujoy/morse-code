
morse-code-new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000508c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005240  08005240  00015240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f0  080052f0  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  080052f0  080052f0  000152f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052f8  080052f8  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08005300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020128  2**0
                  CONTENTS
 10 .bss          00000084  20000128  20000128  00020128  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  00020128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090f4  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001696  00000000  00000000  0002924c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  0002a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b0  00000000  00000000  0002b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cf2  00000000  00000000  0002b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c96  00000000  00000000  0004d3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ceaec  00000000  00000000  00056048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124b34  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002144  00000000  00000000  00124b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000128 	.word	0x20000128
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005224 	.word	0x08005224

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000012c 	.word	0x2000012c
 80001ec:	08005224 	.word	0x08005224

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b2c:	f000 b974 	b.w	8000e18 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9d08      	ldr	r5, [sp, #32]
 8000b4e:	4604      	mov	r4, r0
 8000b50:	468e      	mov	lr, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d14d      	bne.n	8000bf2 <__udivmoddi4+0xaa>
 8000b56:	428a      	cmp	r2, r1
 8000b58:	4694      	mov	ip, r2
 8000b5a:	d969      	bls.n	8000c30 <__udivmoddi4+0xe8>
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	b152      	cbz	r2, 8000b78 <__udivmoddi4+0x30>
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	f1c2 0120 	rsb	r1, r2, #32
 8000b6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b72:	ea41 0e03 	orr.w	lr, r1, r3
 8000b76:	4094      	lsls	r4, r2
 8000b78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b7c:	0c21      	lsrs	r1, r4, #16
 8000b7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b82:	fa1f f78c 	uxth.w	r7, ip
 8000b86:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b8e:	fb06 f107 	mul.w	r1, r6, r7
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x64>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b9e:	f080 811f 	bcs.w	8000de0 <__udivmoddi4+0x298>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 811c 	bls.w	8000de0 <__udivmoddi4+0x298>
 8000ba8:	3e02      	subs	r6, #2
 8000baa:	4463      	add	r3, ip
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 f707 	mul.w	r7, r0, r7
 8000bc0:	42a7      	cmp	r7, r4
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x92>
 8000bc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bcc:	f080 810a 	bcs.w	8000de4 <__udivmoddi4+0x29c>
 8000bd0:	42a7      	cmp	r7, r4
 8000bd2:	f240 8107 	bls.w	8000de4 <__udivmoddi4+0x29c>
 8000bd6:	4464      	add	r4, ip
 8000bd8:	3802      	subs	r0, #2
 8000bda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bde:	1be4      	subs	r4, r4, r7
 8000be0:	2600      	movs	r6, #0
 8000be2:	b11d      	cbz	r5, 8000bec <__udivmoddi4+0xa4>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bec:	4631      	mov	r1, r6
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xc2>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80ef 	beq.w	8000dda <__udivmoddi4+0x292>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x160>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd4>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80f9 	bhi.w	8000e0e <__udivmoddi4+0x2c6>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	469e      	mov	lr, r3
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa4>
 8000c2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa4>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xec>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 8092 	bne.w	8000d62 <__udivmoddi4+0x21a>
 8000c3e:	eba1 010c 	sub.w	r1, r1, ip
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	2601      	movs	r6, #1
 8000c4c:	0c20      	lsrs	r0, r4, #16
 8000c4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c52:	fb07 1113 	mls	r1, r7, r3, r1
 8000c56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5a:	fb0e f003 	mul.w	r0, lr, r3
 8000c5e:	4288      	cmp	r0, r1
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x12c>
 8000c62:	eb1c 0101 	adds.w	r1, ip, r1
 8000c66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x12a>
 8000c6c:	4288      	cmp	r0, r1
 8000c6e:	f200 80cb 	bhi.w	8000e08 <__udivmoddi4+0x2c0>
 8000c72:	4643      	mov	r3, r8
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c84:	fb0e fe00 	mul.w	lr, lr, r0
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x156>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x154>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	f200 80bb 	bhi.w	8000e12 <__udivmoddi4+0x2ca>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ca6:	e79c      	b.n	8000be2 <__udivmoddi4+0x9a>
 8000ca8:	f1c6 0720 	rsb	r7, r6, #32
 8000cac:	40b3      	lsls	r3, r6
 8000cae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	40f9      	lsrs	r1, r7
 8000cc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cce:	0c20      	lsrs	r0, r4, #16
 8000cd0:	fa1f fe8c 	uxth.w	lr, ip
 8000cd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cdc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce6:	d90b      	bls.n	8000d00 <__udivmoddi4+0x1b8>
 8000ce8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cf0:	f080 8088 	bcs.w	8000e04 <__udivmoddi4+0x2bc>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f240 8085 	bls.w	8000e04 <__udivmoddi4+0x2bc>
 8000cfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	1a09      	subs	r1, r1, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d08:	fb09 1110 	mls	r1, r9, r0, r1
 8000d0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d14:	458e      	cmp	lr, r1
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x1e2>
 8000d18:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d20:	d26c      	bcs.n	8000dfc <__udivmoddi4+0x2b4>
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d96a      	bls.n	8000dfc <__udivmoddi4+0x2b4>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4461      	add	r1, ip
 8000d2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d32:	eba1 010e 	sub.w	r1, r1, lr
 8000d36:	42a1      	cmp	r1, r4
 8000d38:	46c8      	mov	r8, r9
 8000d3a:	46a6      	mov	lr, r4
 8000d3c:	d356      	bcc.n	8000dec <__udivmoddi4+0x2a4>
 8000d3e:	d053      	beq.n	8000de8 <__udivmoddi4+0x2a0>
 8000d40:	b15d      	cbz	r5, 8000d5a <__udivmoddi4+0x212>
 8000d42:	ebb3 0208 	subs.w	r2, r3, r8
 8000d46:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d52:	40f1      	lsrs	r1, r6
 8000d54:	431f      	orrs	r7, r3
 8000d56:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	f1c2 0320 	rsb	r3, r2, #32
 8000d66:	40d8      	lsrs	r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d70:	4091      	lsls	r1, r2
 8000d72:	4301      	orrs	r1, r0
 8000d74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d78:	fa1f fe8c 	uxth.w	lr, ip
 8000d7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d80:	fb07 3610 	mls	r6, r7, r0, r3
 8000d84:	0c0b      	lsrs	r3, r1, #16
 8000d86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d8e:	429e      	cmp	r6, r3
 8000d90:	fa04 f402 	lsl.w	r4, r4, r2
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x260>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d9e:	d22f      	bcs.n	8000e00 <__udivmoddi4+0x2b8>
 8000da0:	429e      	cmp	r6, r3
 8000da2:	d92d      	bls.n	8000e00 <__udivmoddi4+0x2b8>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1b9b      	subs	r3, r3, r6
 8000daa:	b289      	uxth	r1, r1
 8000dac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db0:	fb07 3316 	mls	r3, r7, r6, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x28a>
 8000dc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dc8:	d216      	bcs.n	8000df8 <__udivmoddi4+0x2b0>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d914      	bls.n	8000df8 <__udivmoddi4+0x2b0>
 8000dce:	3e02      	subs	r6, #2
 8000dd0:	4461      	add	r1, ip
 8000dd2:	1ac9      	subs	r1, r1, r3
 8000dd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd8:	e738      	b.n	8000c4c <__udivmoddi4+0x104>
 8000dda:	462e      	mov	r6, r5
 8000ddc:	4628      	mov	r0, r5
 8000dde:	e705      	b.n	8000bec <__udivmoddi4+0xa4>
 8000de0:	4606      	mov	r6, r0
 8000de2:	e6e3      	b.n	8000bac <__udivmoddi4+0x64>
 8000de4:	4618      	mov	r0, r3
 8000de6:	e6f8      	b.n	8000bda <__udivmoddi4+0x92>
 8000de8:	454b      	cmp	r3, r9
 8000dea:	d2a9      	bcs.n	8000d40 <__udivmoddi4+0x1f8>
 8000dec:	ebb9 0802 	subs.w	r8, r9, r2
 8000df0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df4:	3801      	subs	r0, #1
 8000df6:	e7a3      	b.n	8000d40 <__udivmoddi4+0x1f8>
 8000df8:	4646      	mov	r6, r8
 8000dfa:	e7ea      	b.n	8000dd2 <__udivmoddi4+0x28a>
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	e794      	b.n	8000d2a <__udivmoddi4+0x1e2>
 8000e00:	4640      	mov	r0, r8
 8000e02:	e7d1      	b.n	8000da8 <__udivmoddi4+0x260>
 8000e04:	46d0      	mov	r8, sl
 8000e06:	e77b      	b.n	8000d00 <__udivmoddi4+0x1b8>
 8000e08:	3b02      	subs	r3, #2
 8000e0a:	4461      	add	r1, ip
 8000e0c:	e732      	b.n	8000c74 <__udivmoddi4+0x12c>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e709      	b.n	8000c26 <__udivmoddi4+0xde>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e742      	b.n	8000c9e <__udivmoddi4+0x156>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <isPressed>:

char buffer[8];
int bufferGetPosition = 0;
int bufferAddPosition = 0;

_Bool isPressed() { return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET; }
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <isPressed+0x20>)
 8000e26:	f001 fb55 	bl	80024d4 <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020800 	.word	0x40020800

08000e40 <isNotPressed>:

_Bool isNotPressed() { return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET; }
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <isNotPressed+0x20>)
 8000e4a:	f001 fb43 	bl	80024d4 <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	bf0c      	ite	eq
 8000e54:	2301      	moveq	r3, #1
 8000e56:	2300      	movne	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40020800 	.word	0x40020800

08000e64 <isBufferEmpty>:

_Bool isBufferEmpty() { return (buffer[0] == 0 && buffer[1] == 0 && buffer[2] == 0 && buffer[3] == 0 && buffer[4] == 0 && buffer[5] == 0 && buffer[6] == 0 && buffer[7] == 0); }
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <isBufferEmpty+0x5c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d11d      	bne.n	8000eac <isBufferEmpty+0x48>
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <isBufferEmpty+0x5c>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d119      	bne.n	8000eac <isBufferEmpty+0x48>
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <isBufferEmpty+0x5c>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d115      	bne.n	8000eac <isBufferEmpty+0x48>
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <isBufferEmpty+0x5c>)
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d111      	bne.n	8000eac <isBufferEmpty+0x48>
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <isBufferEmpty+0x5c>)
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10d      	bne.n	8000eac <isBufferEmpty+0x48>
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <isBufferEmpty+0x5c>)
 8000e92:	795b      	ldrb	r3, [r3, #5]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d109      	bne.n	8000eac <isBufferEmpty+0x48>
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <isBufferEmpty+0x5c>)
 8000e9a:	799b      	ldrb	r3, [r3, #6]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d105      	bne.n	8000eac <isBufferEmpty+0x48>
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <isBufferEmpty+0x5c>)
 8000ea2:	79db      	ldrb	r3, [r3, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <isBufferEmpty+0x48>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <isBufferEmpty+0x4a>
 8000eac:	2300      	movs	r3, #0
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000018c 	.word	0x2000018c

08000ec4 <isBufferFull>:

_Bool isBufferFull() { return (buffer[0] != 0 && buffer[1] != 0  && buffer[2] != 0 && buffer[3] != 0 && buffer[4] != 0 && buffer[5] != 0 && buffer[6] != 0 && buffer[7] != 0); }
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <isBufferFull+0x5c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01d      	beq.n	8000f0c <isBufferFull+0x48>
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <isBufferFull+0x5c>)
 8000ed2:	785b      	ldrb	r3, [r3, #1]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d019      	beq.n	8000f0c <isBufferFull+0x48>
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <isBufferFull+0x5c>)
 8000eda:	789b      	ldrb	r3, [r3, #2]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d015      	beq.n	8000f0c <isBufferFull+0x48>
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <isBufferFull+0x5c>)
 8000ee2:	78db      	ldrb	r3, [r3, #3]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d011      	beq.n	8000f0c <isBufferFull+0x48>
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <isBufferFull+0x5c>)
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00d      	beq.n	8000f0c <isBufferFull+0x48>
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <isBufferFull+0x5c>)
 8000ef2:	795b      	ldrb	r3, [r3, #5]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d009      	beq.n	8000f0c <isBufferFull+0x48>
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <isBufferFull+0x5c>)
 8000efa:	799b      	ldrb	r3, [r3, #6]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <isBufferFull+0x48>
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <isBufferFull+0x5c>)
 8000f02:	79db      	ldrb	r3, [r3, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <isBufferFull+0x48>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <isBufferFull+0x4a>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000018c 	.word	0x2000018c

08000f24 <turnOn>:

void turnOn() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2e:	4802      	ldr	r0, [pc, #8]	; (8000f38 <turnOn+0x14>)
 8000f30:	f001 fae8 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020c00 	.word	0x40020c00

08000f3c <turnOff>:

void turnOff() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f46:	4802      	ldr	r0, [pc, #8]	; (8000f50 <turnOff+0x14>)
 8000f48:	f001 fadc 	bl	8002504 <HAL_GPIO_WritePin>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020c00 	.word	0x40020c00

08000f54 <addToBuffer>:

void addToBuffer(char s) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	buffer[bufferAddPosition] = s;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <addToBuffer+0x38>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	490b      	ldr	r1, [pc, #44]	; (8000f90 <addToBuffer+0x3c>)
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	54ca      	strb	r2, [r1, r3]
	bufferAddPosition++;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <addToBuffer+0x38>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <addToBuffer+0x38>)
 8000f70:	6013      	str	r3, [r2, #0]
	if (bufferAddPosition > 7) {
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <addToBuffer+0x38>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	dd02      	ble.n	8000f80 <addToBuffer+0x2c>
		bufferAddPosition = 0;
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <addToBuffer+0x38>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
	}
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20000198 	.word	0x20000198
 8000f90:	2000018c 	.word	0x2000018c

08000f94 <getCharFromBuffer>:

char getCharFromBuffer() {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
	char toReturn = buffer[bufferGetPosition];
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <getCharFromBuffer+0x40>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <getCharFromBuffer+0x44>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	71fb      	strb	r3, [r7, #7]
	buffer[bufferGetPosition] = 0;
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <getCharFromBuffer+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <getCharFromBuffer+0x44>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	54d1      	strb	r1, [r2, r3]
	bufferGetPosition++;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <getCharFromBuffer+0x40>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <getCharFromBuffer+0x40>)
 8000fb6:	6013      	str	r3, [r2, #0]
	if (bufferGetPosition > 7) {
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <getCharFromBuffer+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	dd02      	ble.n	8000fc6 <getCharFromBuffer+0x32>
		bufferGetPosition = 0;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <getCharFromBuffer+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
	}
	return toReturn;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000194 	.word	0x20000194
 8000fd8:	2000018c 	.word	0x2000018c

08000fdc <getMorseCode>:

int getMorseCode(char s) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	int position = -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fea:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(letters); i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	e00c      	b.n	800100c <getMorseCode+0x30>
		if (s == letters[i]) {
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <getMorseCode+0x54>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d102      	bne.n	8001006 <getMorseCode+0x2a>
			position = i;
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60fb      	str	r3, [r7, #12]
			break;
 8001004:	e005      	b.n	8001012 <getMorseCode+0x36>
	for (int i = 0; i < sizeof(letters); i++) {
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3301      	adds	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b24      	cmp	r3, #36	; 0x24
 8001010:	d9ef      	bls.n	8000ff2 <getMorseCode+0x16>
		}
	}
	if (position >= 0) {
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db04      	blt.n	8001022 <getMorseCode+0x46>
		return morse[position];
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <getMorseCode+0x58>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	e000      	b.n	8001024 <getMorseCode+0x48>
	} else {
		return position;
 8001022:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000000 	.word	0x20000000
 8001034:	20000028 	.word	0x20000028

08001038 <getCharByMorseCode>:

char getCharByMorseCode(int s) {
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	int position = -1;
 8001040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001044:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(morse); i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	e00c      	b.n	8001066 <getCharByMorseCode+0x2e>
		if (s == morse[i]) {
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <getCharByMorseCode+0x54>)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d102      	bne.n	8001060 <getCharByMorseCode+0x28>
			position = i;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	60fb      	str	r3, [r7, #12]
			break;
 800105e:	e005      	b.n	800106c <getCharByMorseCode+0x34>
	for (int i = 0; i < sizeof(morse); i++) {
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3301      	adds	r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b8f      	cmp	r3, #143	; 0x8f
 800106a:	d9ef      	bls.n	800104c <getCharByMorseCode+0x14>
		}
	}
	if (position >= 0) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db04      	blt.n	800107c <getCharByMorseCode+0x44>
		return letters[position];
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <getCharByMorseCode+0x58>)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	e000      	b.n	800107e <getCharByMorseCode+0x46>
	} else {
		return '-';
 800107c:	232d      	movs	r3, #45	; 0x2d
	}
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000028 	.word	0x20000028
 8001090:	20000000 	.word	0x20000000

08001094 <uart6_start_recieve_char_it>:
int uart6_recieve_finished;
int uart6_transmit_ongoing;

static uint8_t uart6_buf;

HAL_StatusTypeDef uart6_start_recieve_char_it() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	uart6_recieve_finished = 0;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <uart6_start_recieve_char_it+0x1c>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
	return HAL_UART_Receive_IT(&huart6, &uart6_buf, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	4904      	ldr	r1, [pc, #16]	; (80010b4 <uart6_start_recieve_char_it+0x20>)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <uart6_start_recieve_char_it+0x24>)
 80010a4:	f002 f866 	bl	8003174 <HAL_UART_Receive_IT>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000019c 	.word	0x2000019c
 80010b4:	200001a4 	.word	0x200001a4
 80010b8:	20000144 	.word	0x20000144

080010bc <uart6_try_get_received_char>:

int uart6_try_get_received_char(uint8_t *buf) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	if (uart6_recieve_finished) {
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <uart6_try_get_received_char+0x2c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <uart6_try_get_received_char+0x1c>
		*buf = uart6_buf;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <uart6_try_get_received_char+0x30>)
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	701a      	strb	r2, [r3, #0]
		return 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <uart6_try_get_received_char+0x1e>
	}

	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	2000019c 	.word	0x2000019c
 80010ec:	200001a4 	.word	0x200001a4

080010f0 <uart6_transmit_it>:

HAL_StatusTypeDef uart6_transmit_it (uint8_t *buf, int len) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	while (uart6_transmit_ongoing);
 80010fa:	bf00      	nop
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <uart6_transmit_it+0x34>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1fb      	bne.n	80010fc <uart6_transmit_it+0xc>

	uart6_transmit_ongoing = 1;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <uart6_transmit_it+0x34>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
	return HAL_UART_Transmit_IT(&huart6, buf, len);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <uart6_transmit_it+0x38>)
 8001114:	f001 ffe9 	bl	80030ea <HAL_UART_Transmit_IT>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200001a0 	.word	0x200001a0
 8001128:	20000144 	.word	0x20000144

0800112c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a05      	ldr	r2, [pc, #20]	; (8001150 <HAL_UART_RxCpltCallback+0x24>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d102      	bne.n	8001144 <HAL_UART_RxCpltCallback+0x18>
		uart6_recieve_finished = 1;
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_UART_RxCpltCallback+0x28>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
	}
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40011400 	.word	0x40011400
 8001154:	2000019c 	.word	0x2000019c

08001158 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a05      	ldr	r2, [pc, #20]	; (800117c <HAL_UART_TxCpltCallback+0x24>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d102      	bne.n	8001170 <HAL_UART_TxCpltCallback+0x18>
		uart6_transmit_ongoing = 0;
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_UART_TxCpltCallback+0x28>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
	}
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40011400 	.word	0x40011400
 8001180:	200001a0 	.word	0x200001a0
 8001184:	00000000 	.word	0x00000000

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b0ac      	sub	sp, #176	; 0xb0
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fdad 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 fbc3 	bl	800191c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f000 fc4b 	bl	8001a30 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800119a:	f000 fc1f 	bl	80019dc <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char recieved, current, toSend[3];
  int currentMorse = -1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  int morseTen = 5;
 80011a6:	2305      	movs	r3, #5
 80011a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int btnMorse = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int btnCounter = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  _Bool isLightOn = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  _Bool isPause = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
  _Bool isBtnPressed = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
  _Bool isBtnPause = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
  uint32_t blinkStartTime, pauseStartTime, diffLO, diffPause, btnStart, btnDiff, btnPauseStart, btnPauseDiff;
  int blinkingMode;
  char err[] = "Unsupported symbol by button \n";
 80011d0:	4bc7      	ldr	r3, [pc, #796]	; (80014f0 <main+0x368>)
 80011d2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80011d6:	461d      	mov	r5, r3
 80011d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011e0:	c407      	stmia	r4!, {r0, r1, r2}
 80011e2:	8023      	strh	r3, [r4, #0]
 80011e4:	3402      	adds	r4, #2
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	7023      	strb	r3, [r4, #0]
  char intOn[] = "Interrupts turned On \n";
 80011ea:	4bc2      	ldr	r3, [pc, #776]	; (80014f4 <main+0x36c>)
 80011ec:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80011f0:	461d      	mov	r5, r3
 80011f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011fa:	6020      	str	r0, [r4, #0]
 80011fc:	3404      	adds	r4, #4
 80011fe:	8021      	strh	r1, [r4, #0]
 8001200:	3402      	adds	r4, #2
 8001202:	0c0b      	lsrs	r3, r1, #16
 8001204:	7023      	strb	r3, [r4, #0]
  char intOff[] = "Interrupts turned Off \n";
 8001206:	4bbc      	ldr	r3, [pc, #752]	; (80014f8 <main+0x370>)
 8001208:	f107 0420 	add.w	r4, r7, #32
 800120c:	461d      	mov	r5, r3
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001216:	e884 0003 	stmia.w	r4, {r0, r1}
  char ready[] = "Ready for work \n";
 800121a:	4bb8      	ldr	r3, [pc, #736]	; (80014fc <main+0x374>)
 800121c:	f107 040c 	add.w	r4, r7, #12
 8001220:	461d      	mov	r5, r3
 8001222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	7023      	strb	r3, [r4, #0]

  HAL_UART_Transmit(&huart6, (uint8_t *) ready, sizeof(ready), 10);
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	230a      	movs	r3, #10
 8001230:	2211      	movs	r2, #17
 8001232:	48b3      	ldr	r0, [pc, #716]	; (8001500 <main+0x378>)
 8001234:	f001 fe25 	bl	8002e82 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!isUseInterrupts) {
 8001238:	4bb2      	ldr	r3, [pc, #712]	; (8001504 <main+0x37c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	f083 0301 	eor.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 81bc 	beq.w	80015c0 <main+0x438>
		//No Interrupts
		if (HAL_OK == HAL_UART_Receive(&huart6, (uint8_t *) &recieved, 1, 1)) {
 8001248:	f107 0173 	add.w	r1, r7, #115	; 0x73
 800124c:	2301      	movs	r3, #1
 800124e:	2201      	movs	r2, #1
 8001250:	48ab      	ldr	r0, [pc, #684]	; (8001500 <main+0x378>)
 8001252:	f001 fea8 	bl	8002fa6 <HAL_UART_Receive>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d12e      	bne.n	80012ba <main+0x132>
			char toret[3];
			toret[0] = recieved;
 800125c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001260:	723b      	strb	r3, [r7, #8]
			toret[1] = '\n';
 8001262:	230a      	movs	r3, #10
 8001264:	727b      	strb	r3, [r7, #9]
			toret[2] = '\r';
 8001266:	230d      	movs	r3, #13
 8001268:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart6, (uint8_t *) toret, 3, 10);
 800126a:	f107 0108 	add.w	r1, r7, #8
 800126e:	230a      	movs	r3, #10
 8001270:	2203      	movs	r2, #3
 8001272:	48a3      	ldr	r0, [pc, #652]	; (8001500 <main+0x378>)
 8001274:	f001 fe05 	bl	8002e82 <HAL_UART_Transmit>

			if (recieved == '+') {
 8001278:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800127c:	2b2b      	cmp	r3, #43	; 0x2b
 800127e:	d10f      	bne.n	80012a0 <main+0x118>
				isUseInterrupts = 1;
 8001280:	4ba0      	ldr	r3, [pc, #640]	; (8001504 <main+0x37c>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6, (uint8_t *) intOn, sizeof(intOn), 10);
 8001286:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800128a:	230a      	movs	r3, #10
 800128c:	2217      	movs	r2, #23
 800128e:	489c      	ldr	r0, [pc, #624]	; (8001500 <main+0x378>)
 8001290:	f001 fdf7 	bl	8002e82 <HAL_UART_Transmit>
				HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001294:	2047      	movs	r0, #71	; 0x47
 8001296:	f000 feb6 	bl	8002006 <HAL_NVIC_EnableIRQ>
				uart6_start_recieve_char_it();
 800129a:	f7ff fefb 	bl	8001094 <uart6_start_recieve_char_it>
 800129e:	e7cb      	b.n	8001238 <main+0xb0>
				continue;
			}

			if (!isBufferFull()) {
 80012a0:	f7ff fe10 	bl	8000ec4 <isBufferFull>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <main+0x132>
				addToBuffer(recieved);
 80012b0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe4d 	bl	8000f54 <addToBuffer>
			}

		}

		if (!isLightOn && !isPause) {
 80012ba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80012be:	f083 0301 	eor.w	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d07d      	beq.n	80013c4 <main+0x23c>
 80012c8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d076      	beq.n	80013c4 <main+0x23c>
			if (!isBufferEmpty() && currentMorse < 0) {
 80012d6:	f7ff fdc5 	bl	8000e64 <isBufferEmpty>
 80012da:	4603      	mov	r3, r0
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00f      	beq.n	8001306 <main+0x17e>
 80012e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da0b      	bge.n	8001306 <main+0x17e>
				current = getCharFromBuffer();
 80012ee:	f7ff fe51 	bl	8000f94 <getCharFromBuffer>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				currentMorse = getMorseCode(current);
 80012f8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe6d 	bl	8000fdc <getMorseCode>
 8001302:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
			}

			if (currentMorse >= 0) {
 8001306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800130a:	2b00      	cmp	r3, #0
 800130c:	db5a      	blt.n	80013c4 <main+0x23c>
				blinkingMode = currentMorse / pow(10, morseTen);
 800130e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001312:	f7ff f8bf 	bl	8000494 <__aeabi_i2d>
 8001316:	4604      	mov	r4, r0
 8001318:	460d      	mov	r5, r1
 800131a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800131e:	f7ff f8b9 	bl	8000494 <__aeabi_i2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	ec43 2b11 	vmov	d1, r2, r3
 800132a:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 80014e8 <main+0x360>
 800132e:	f003 f85f 	bl	80043f0 <pow>
 8001332:	ec53 2b10 	vmov	r2, r3, d0
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7ff fa3f 	bl	80007bc <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fbbf 	bl	8000ac8 <__aeabi_d2iz>
 800134a:	4603      	mov	r3, r0
 800134c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				currentMorse = currentMorse % (int)pow(10, morseTen);
 8001350:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001354:	f7ff f89e 	bl	8000494 <__aeabi_i2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	ec43 2b11 	vmov	d1, r2, r3
 8001360:	ed9f 0b61 	vldr	d0, [pc, #388]	; 80014e8 <main+0x360>
 8001364:	f003 f844 	bl	80043f0 <pow>
 8001368:	ec53 2b10 	vmov	r2, r3, d0
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fbaa 	bl	8000ac8 <__aeabi_d2iz>
 8001374:	4602      	mov	r2, r0
 8001376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800137a:	fb93 f1f2 	sdiv	r1, r3, r2
 800137e:	fb01 f202 	mul.w	r2, r1, r2
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				morseTen--;
 8001388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800138c:	3b01      	subs	r3, #1
 800138e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (morseTen == -1) {
 8001392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800139a:	d106      	bne.n	80013aa <main+0x222>
					morseTen = 5;
 800139c:	2305      	movs	r3, #5
 800139e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					currentMorse = -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				}

				if (blinkingMode > 0) {
 80013aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd08      	ble.n	80013c4 <main+0x23c>
					blinkStartTime = HAL_GetTick();
 80013b2:	f000 fd01 	bl	8001db8 <HAL_GetTick>
 80013b6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					turnOn();
 80013ba:	f7ff fdb3 	bl	8000f24 <turnOn>
					isLightOn = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}

			}
		}

		if (isLightOn) {
 80013c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d032      	beq.n	8001432 <main+0x2aa>
			diffLO = HAL_GetTick() - blinkStartTime;
 80013cc:	f000 fcf4 	bl	8001db8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (blinkingMode == 1) {
 80013dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d111      	bne.n	8001408 <main+0x280>
				if (diffLO >= 300) {
 80013e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013ec:	d321      	bcc.n	8001432 <main+0x2aa>
					turnOff();
 80013ee:	f7ff fda5 	bl	8000f3c <turnOff>
					pauseStartTime = HAL_GetTick();
 80013f2:	f000 fce1 	bl	8001db8 <HAL_GetTick>
 80013f6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
					isLightOn = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					isPause = 1;
 8001400:	2301      	movs	r3, #1
 8001402:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8001406:	e014      	b.n	8001432 <main+0x2aa>
				}
			} else if (blinkingMode == 2) {
 8001408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800140c:	2b02      	cmp	r3, #2
 800140e:	d110      	bne.n	8001432 <main+0x2aa>
				if (diffLO >= 700) {
 8001410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001414:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001418:	d30b      	bcc.n	8001432 <main+0x2aa>
					turnOff();
 800141a:	f7ff fd8f 	bl	8000f3c <turnOff>
					pauseStartTime = HAL_GetTick();
 800141e:	f000 fccb 	bl	8001db8 <HAL_GetTick>
 8001422:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
					isLightOn = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					isPause = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
				}
			}
		}

		if (isPause) {
 8001432:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00d      	beq.n	8001456 <main+0x2ce>
			diffPause = HAL_GetTick() - pauseStartTime;
 800143a:	f000 fcbd 	bl	8001db8 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	67fb      	str	r3, [r7, #124]	; 0x7c
			if (diffPause >= 300) {
 8001448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800144a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800144e:	d302      	bcc.n	8001456 <main+0x2ce>
				isPause = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			}
		}

		if (!isBtnPressed) {
 8001456:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800145a:	f083 0301 	eor.w	r3, r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <main+0x2fa>
			if (isPressed()) {
 8001464:	f7ff fcda 	bl	8000e1c <isPressed>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <main+0x2fa>
				isBtnPressed = 1;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				isBtnPause = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
				btnStart = HAL_GetTick();
 800147a:	f000 fc9d 	bl	8001db8 <HAL_GetTick>
 800147e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			}
		}

		if (isBtnPressed) {
 8001482:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8001486:	2b00      	cmp	r3, #0
 8001488:	d04c      	beq.n	8001524 <main+0x39c>
			if (isNotPressed()) {
 800148a:	f7ff fcd9 	bl	8000e40 <isNotPressed>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d047      	beq.n	8001524 <main+0x39c>
				isBtnPressed = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				isBtnPause = 1;
 800149a:	2301      	movs	r3, #1
 800149c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
				btnDiff = HAL_GetTick() - btnStart;
 80014a0:	f000 fc8a 	bl	8001db8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	67bb      	str	r3, [r7, #120]	; 0x78
				btnPauseStart = HAL_GetTick();
 80014ae:	f000 fc83 	bl	8001db8 <HAL_GetTick>
 80014b2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

				if (btnDiff >= 100) {
 80014b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014b8:	2b63      	cmp	r3, #99	; 0x63
 80014ba:	d933      	bls.n	8001524 <main+0x39c>
					if (btnDiff < 500) {
 80014bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014c2:	d221      	bcs.n	8001508 <main+0x380>
						btnMorse = btnMorse * 10 + 1;
 80014c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	3301      	adds	r3, #1
 80014d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
						btnCounter++;
 80014d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014da:	3301      	adds	r3, #1
 80014dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80014e0:	e020      	b.n	8001524 <main+0x39c>
 80014e2:	bf00      	nop
 80014e4:	f3af 8000 	nop.w
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40240000 	.word	0x40240000
 80014f0:	08005240 	.word	0x08005240
 80014f4:	08005260 	.word	0x08005260
 80014f8:	08005278 	.word	0x08005278
 80014fc:	08005290 	.word	0x08005290
 8001500:	20000144 	.word	0x20000144
 8001504:	20000188 	.word	0x20000188
					} else {
						btnMorse = btnMorse * 10 + 2;
 8001508:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	3302      	adds	r3, #2
 8001516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
						btnCounter++;
 800151a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				}
			}
		}


		if (isBtnPause) {
 8001524:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8001528:	2b00      	cmp	r3, #0
 800152a:	f43f ae85 	beq.w	8001238 <main+0xb0>
			if (isNotPressed()) {
 800152e:	f7ff fc87 	bl	8000e40 <isNotPressed>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	f43f ae7f 	beq.w	8001238 <main+0xb0>
				btnPauseDiff = HAL_GetTick() - btnPauseStart;
 800153a:	f000 fc3d 	bl	8001db8 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	677b      	str	r3, [r7, #116]	; 0x74

				if (btnPauseDiff > 1000) {
 8001548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800154a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154e:	f67f ae73 	bls.w	8001238 <main+0xb0>
					toSend[0] = getCharByMorseCode(btnMorse);
 8001552:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001556:	f7ff fd6f 	bl	8001038 <getCharByMorseCode>
 800155a:	4603      	mov	r3, r0
 800155c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
					if (toSend[0] == '-') {
 8001560:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001564:	2b2d      	cmp	r3, #45	; 0x2d
 8001566:	d107      	bne.n	8001578 <main+0x3f0>
						HAL_UART_Transmit(&huart6, (uint8_t *) err, sizeof(err), 10);
 8001568:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800156c:	230a      	movs	r3, #10
 800156e:	221f      	movs	r2, #31
 8001570:	48bb      	ldr	r0, [pc, #748]	; (8001860 <main+0x6d8>)
 8001572:	f001 fc86 	bl	8002e82 <HAL_UART_Transmit>
 8001576:	e019      	b.n	80015ac <main+0x424>
					} else {
						toSend[1] = '\n';
 8001578:	230a      	movs	r3, #10
 800157a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
						toSend[2] = '\r';
 800157e:	230d      	movs	r3, #13
 8001580:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
						HAL_UART_Transmit(&huart6, (uint8_t *) toSend, 3, 10);
 8001584:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001588:	230a      	movs	r3, #10
 800158a:	2203      	movs	r2, #3
 800158c:	48b4      	ldr	r0, [pc, #720]	; (8001860 <main+0x6d8>)
 800158e:	f001 fc78 	bl	8002e82 <HAL_UART_Transmit>

						if (!isBufferFull()) {
 8001592:	f7ff fc97 	bl	8000ec4 <isBufferFull>
 8001596:	4603      	mov	r3, r0
 8001598:	f083 0301 	eor.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <main+0x424>
							addToBuffer(toSend[0]);
 80015a2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fcd4 	bl	8000f54 <addToBuffer>
						}
					}
					isBtnPause = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
					btnMorse = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					btnCounter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015be:	e63b      	b.n	8001238 <main+0xb0>
			}
		}

	  } else {
		//With Interrupts
		if (uart6_try_get_received_char((uint8_t *) &recieved)) {
 80015c0:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd79 	bl	80010bc <uart6_try_get_received_char>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d02f      	beq.n	8001630 <main+0x4a8>
			uart6_start_recieve_char_it();
 80015d0:	f7ff fd60 	bl	8001094 <uart6_start_recieve_char_it>

			char toret[3];
			toret[0] = recieved;
 80015d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80015d8:	713b      	strb	r3, [r7, #4]
			toret[1] = '\n';
 80015da:	230a      	movs	r3, #10
 80015dc:	717b      	strb	r3, [r7, #5]
			toret[2] = '\r';
 80015de:	230d      	movs	r3, #13
 80015e0:	71bb      	strb	r3, [r7, #6]
			uart6_transmit_it((uint8_t *) &toret, 3);
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2103      	movs	r1, #3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fd82 	bl	80010f0 <uart6_transmit_it>
			if (recieved == '+') {
 80015ec:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80015f0:	2b2b      	cmp	r3, #43	; 0x2b
 80015f2:	d110      	bne.n	8001616 <main+0x48e>
				isUseInterrupts = 0;
 80015f4:	4b9b      	ldr	r3, [pc, #620]	; (8001864 <main+0x6dc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Abort_IT(&huart6);
 80015fa:	4899      	ldr	r0, [pc, #612]	; (8001860 <main+0x6d8>)
 80015fc:	f001 fdea 	bl	80031d4 <HAL_UART_Abort_IT>
				HAL_NVIC_DisableIRQ(USART6_IRQn);
 8001600:	2047      	movs	r0, #71	; 0x47
 8001602:	f000 fd0e 	bl	8002022 <HAL_NVIC_DisableIRQ>
				HAL_UART_Transmit(&huart6, (uint8_t *) intOff, sizeof(intOff), 10);
 8001606:	f107 0120 	add.w	r1, r7, #32
 800160a:	230a      	movs	r3, #10
 800160c:	2218      	movs	r2, #24
 800160e:	4894      	ldr	r0, [pc, #592]	; (8001860 <main+0x6d8>)
 8001610:	f001 fc37 	bl	8002e82 <HAL_UART_Transmit>
 8001614:	e610      	b.n	8001238 <main+0xb0>
				continue;
			}

			if (!isBufferFull()) {
 8001616:	f7ff fc55 	bl	8000ec4 <isBufferFull>
 800161a:	4603      	mov	r3, r0
 800161c:	f083 0301 	eor.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <main+0x4a8>
				addToBuffer(recieved);
 8001626:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fc92 	bl	8000f54 <addToBuffer>
			}
		}

		if (!isLightOn && !isPause) {
 8001630:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001634:	f083 0301 	eor.w	r3, r3, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d07d      	beq.n	800173a <main+0x5b2>
 800163e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001642:	f083 0301 	eor.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d076      	beq.n	800173a <main+0x5b2>
			if (!isBufferEmpty() && currentMorse < 0) {
 800164c:	f7ff fc0a 	bl	8000e64 <isBufferEmpty>
 8001650:	4603      	mov	r3, r0
 8001652:	f083 0301 	eor.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00f      	beq.n	800167c <main+0x4f4>
 800165c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001660:	2b00      	cmp	r3, #0
 8001662:	da0b      	bge.n	800167c <main+0x4f4>
				current = getCharFromBuffer();
 8001664:	f7ff fc96 	bl	8000f94 <getCharFromBuffer>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				currentMorse = getMorseCode(current);
 800166e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fcb2 	bl	8000fdc <getMorseCode>
 8001678:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
			}

			if (currentMorse >= 0) {
 800167c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001680:	2b00      	cmp	r3, #0
 8001682:	db5a      	blt.n	800173a <main+0x5b2>
				blinkingMode = currentMorse / pow(10, morseTen);
 8001684:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001688:	f7fe ff04 	bl	8000494 <__aeabi_i2d>
 800168c:	4604      	mov	r4, r0
 800168e:	460d      	mov	r5, r1
 8001690:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001694:	f7fe fefe 	bl	8000494 <__aeabi_i2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	ec43 2b11 	vmov	d1, r2, r3
 80016a0:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 8001858 <main+0x6d0>
 80016a4:	f002 fea4 	bl	80043f0 <pow>
 80016a8:	ec53 2b10 	vmov	r2, r3, d0
 80016ac:	4620      	mov	r0, r4
 80016ae:	4629      	mov	r1, r5
 80016b0:	f7ff f884 	bl	80007bc <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fa04 	bl	8000ac8 <__aeabi_d2iz>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				currentMorse = currentMorse % (int)pow(10, morseTen);
 80016c6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80016ca:	f7fe fee3 	bl	8000494 <__aeabi_i2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ec43 2b11 	vmov	d1, r2, r3
 80016d6:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8001858 <main+0x6d0>
 80016da:	f002 fe89 	bl	80043f0 <pow>
 80016de:	ec53 2b10 	vmov	r2, r3, d0
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff f9ef 	bl	8000ac8 <__aeabi_d2iz>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80016f4:	fb01 f202 	mul.w	r2, r1, r2
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				morseTen--;
 80016fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001702:	3b01      	subs	r3, #1
 8001704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (morseTen == -1) {
 8001708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001710:	d106      	bne.n	8001720 <main+0x598>
					morseTen = 5;
 8001712:	2305      	movs	r3, #5
 8001714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					currentMorse = -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				}

				if (blinkingMode > 0) {
 8001720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001724:	2b00      	cmp	r3, #0
 8001726:	dd08      	ble.n	800173a <main+0x5b2>
					blinkStartTime = HAL_GetTick();
 8001728:	f000 fb46 	bl	8001db8 <HAL_GetTick>
 800172c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					turnOn();
 8001730:	f7ff fbf8 	bl	8000f24 <turnOn>
					isLightOn = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}

			}
		}

		if (isLightOn) {
 800173a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800173e:	2b00      	cmp	r3, #0
 8001740:	d032      	beq.n	80017a8 <main+0x620>
			diffLO = HAL_GetTick() - blinkStartTime;
 8001742:	f000 fb39 	bl	8001db8 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (blinkingMode == 1) {
 8001752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001756:	2b01      	cmp	r3, #1
 8001758:	d111      	bne.n	800177e <main+0x5f6>
				if (diffLO >= 300) {
 800175a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800175e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001762:	d321      	bcc.n	80017a8 <main+0x620>
					turnOff();
 8001764:	f7ff fbea 	bl	8000f3c <turnOff>
					pauseStartTime = HAL_GetTick();
 8001768:	f000 fb26 	bl	8001db8 <HAL_GetTick>
 800176c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
					isLightOn = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					isPause = 1;
 8001776:	2301      	movs	r3, #1
 8001778:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800177c:	e014      	b.n	80017a8 <main+0x620>
				}
			} else if (blinkingMode == 2) {
 800177e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001782:	2b02      	cmp	r3, #2
 8001784:	d110      	bne.n	80017a8 <main+0x620>
				if (diffLO >= 700) {
 8001786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800178a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800178e:	d30b      	bcc.n	80017a8 <main+0x620>
					turnOff();
 8001790:	f7ff fbd4 	bl	8000f3c <turnOff>
					pauseStartTime = HAL_GetTick();
 8001794:	f000 fb10 	bl	8001db8 <HAL_GetTick>
 8001798:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
					isLightOn = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					isPause = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
				}
			}
		}

		if (isPause) {
 80017a8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00d      	beq.n	80017cc <main+0x644>
			diffPause = HAL_GetTick() - pauseStartTime;
 80017b0:	f000 fb02 	bl	8001db8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	67fb      	str	r3, [r7, #124]	; 0x7c
			if (diffPause >= 300) {
 80017be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017c4:	d302      	bcc.n	80017cc <main+0x644>
				isPause = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			}
		}

		if (!isBtnPressed) {
 80017cc:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80017d0:	f083 0301 	eor.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <main+0x670>
			if (isPressed()) {
 80017da:	f7ff fb1f 	bl	8000e1c <isPressed>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <main+0x670>
				isBtnPressed = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				isBtnPause = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
				btnStart = HAL_GetTick();
 80017f0:	f000 fae2 	bl	8001db8 <HAL_GetTick>
 80017f4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			}
		}

		if (isBtnPressed) {
 80017f8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d041      	beq.n	8001884 <main+0x6fc>
			if (isNotPressed()) {
 8001800:	f7ff fb1e 	bl	8000e40 <isNotPressed>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03c      	beq.n	8001884 <main+0x6fc>
				isBtnPressed = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				isBtnPause = 1;
 8001810:	2301      	movs	r3, #1
 8001812:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
				btnDiff = HAL_GetTick() - btnStart;
 8001816:	f000 facf 	bl	8001db8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	67bb      	str	r3, [r7, #120]	; 0x78
				btnPauseStart = HAL_GetTick();
 8001824:	f000 fac8 	bl	8001db8 <HAL_GetTick>
 8001828:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

				if (btnDiff >= 100) {
 800182c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800182e:	2b63      	cmp	r3, #99	; 0x63
 8001830:	d928      	bls.n	8001884 <main+0x6fc>
					if (btnDiff < 500) {
 8001832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001834:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001838:	d216      	bcs.n	8001868 <main+0x6e0>
						btnMorse = btnMorse * 10 + 1;
 800183a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3301      	adds	r3, #1
 8001848:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
						btnCounter++;
 800184c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001856:	e015      	b.n	8001884 <main+0x6fc>
 8001858:	00000000 	.word	0x00000000
 800185c:	40240000 	.word	0x40240000
 8001860:	20000144 	.word	0x20000144
 8001864:	20000188 	.word	0x20000188
					} else {
						btnMorse = btnMorse * 10 + 2;
 8001868:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	3302      	adds	r3, #2
 8001876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
						btnCounter++;
 800187a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800187e:	3301      	adds	r3, #1
 8001880:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					}
				}
			}
		}

		if (isBtnPause) {
 8001884:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8001888:	2b00      	cmp	r3, #0
 800188a:	f43f acd5 	beq.w	8001238 <main+0xb0>
			if (isNotPressed()) {
 800188e:	f7ff fad7 	bl	8000e40 <isNotPressed>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	f43f accf 	beq.w	8001238 <main+0xb0>
				btnPauseDiff = HAL_GetTick() - btnPauseStart;
 800189a:	f000 fa8d 	bl	8001db8 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	677b      	str	r3, [r7, #116]	; 0x74

				if (btnPauseDiff > 1000) {
 80018a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ae:	f67f acc3 	bls.w	8001238 <main+0xb0>
					toSend[0] = getCharByMorseCode(btnMorse);
 80018b2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80018b6:	f7ff fbbf 	bl	8001038 <getCharByMorseCode>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
					if (toSend[0] == '-') {
 80018c0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80018c4:	2b2d      	cmp	r3, #45	; 0x2d
 80018c6:	d106      	bne.n	80018d6 <main+0x74e>
						uart6_transmit_it((uint8_t *) &err, sizeof(err));
 80018c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018cc:	211f      	movs	r1, #31
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fc0e 	bl	80010f0 <uart6_transmit_it>
 80018d4:	e018      	b.n	8001908 <main+0x780>
					} else {
						toSend[1] = '\n';
 80018d6:	230a      	movs	r3, #10
 80018d8:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
						toSend[2] = '\r';
 80018dc:	230d      	movs	r3, #13
 80018de:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
						uart6_transmit_it((uint8_t *) &toSend, sizeof(toSend));
 80018e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018e6:	2103      	movs	r1, #3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fc01 	bl	80010f0 <uart6_transmit_it>

						if (!isBufferFull()) {
 80018ee:	f7ff fae9 	bl	8000ec4 <isBufferFull>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f083 0301 	eor.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <main+0x780>
							addToBuffer(toSend[0]);
 80018fe:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fb26 	bl	8000f54 <addToBuffer>
						}
					}
					isBtnPause = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
					btnMorse = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					btnCounter = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  if (!isUseInterrupts) {
 800191a:	e48d      	b.n	8001238 <main+0xb0>

0800191c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	; 0x50
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2230      	movs	r2, #48	; 0x30
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fd58 	bl	80043e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <SystemClock_Config+0xb8>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <SystemClock_Config+0xb8>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <SystemClock_Config+0xb8>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <SystemClock_Config+0xbc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <SystemClock_Config+0xbc>)
 800196a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <SystemClock_Config+0xbc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197c:	2302      	movs	r3, #2
 800197e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001980:	2301      	movs	r3, #1
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001984:	2310      	movs	r3, #16
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198c:	f107 0320 	add.w	r3, r7, #32
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fdd1 	bl	8002538 <HAL_RCC_OscConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800199c:	f000 f8b8 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a0:	230f      	movs	r3, #15
 80019a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 f834 	bl	8002a28 <HAL_RCC_ClockConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019c6:	f000 f8a3 	bl	8001b10 <Error_Handler>
  }
}
 80019ca:	bf00      	nop
 80019cc:	3750      	adds	r7, #80	; 0x50
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40007000 	.word	0x40007000

080019dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <MX_USART6_UART_Init+0x50>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_USART6_UART_Init+0x4c>)
 8001a14:	f001 f9e8 	bl	8002de8 <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a1e:	f000 f877 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000144 	.word	0x20000144
 8001a2c:	40011400 	.word	0x40011400

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_GPIO_Init+0xd4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <MX_GPIO_Init+0xd8>)
 8001abe:	f000 fd21 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_GPIO_Init+0xdc>)
 8001ad8:	f000 fb50 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001adc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_GPIO_Init+0xd8>)
 8001af6:	f000 fb41 	bl	800217c <HAL_GPIO_Init>

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	; 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40020800 	.word	0x40020800

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <Error_Handler+0x8>
	...

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_UART_MspInit+0x94>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d133      	bne.n	8001bf6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_UART_MspInit+0x98>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <HAL_UART_MspInit+0x98>)
 8001b98:	f043 0320 	orr.w	r3, r3, #32
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_UART_MspInit+0x98>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_UART_MspInit+0x98>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_UART_MspInit+0x98>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_UART_MspInit+0x98>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc6:	23c0      	movs	r3, #192	; 0xc0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <HAL_UART_MspInit+0x9c>)
 8001be2:	f000 facb 	bl	800217c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2047      	movs	r0, #71	; 0x47
 8001bec:	f000 f9ef 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bf0:	2047      	movs	r0, #71	; 0x47
 8001bf2:	f000 fa08 	bl	8002006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40011400 	.word	0x40011400
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020800 	.word	0x40020800

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <NMI_Handler+0x4>

08001c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <MemManage_Handler+0x4>

08001c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <BusFault_Handler+0x4>

08001c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <UsageFault_Handler+0x4>

08001c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c58:	f000 f89a 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <USART6_IRQHandler+0x10>)
 8001c66:	f001 fbc9 	bl	80033fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000144 	.word	0x20000144

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc2:	f7ff ffd7 	bl	8001c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f002 fb67 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fa5d 	bl	8001188 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001cdc:	08005300 	.word	0x08005300
  ldr r2, =_sbss
 8001ce0:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001ce4:	200001ac 	.word	0x200001ac

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f94f 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fefc 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f975 	bl	800203e <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6c:	f000 f92f 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200000b8 	.word	0x200000b8
 8001d88:	200000c0 	.word	0x200000c0
 8001d8c:	200000bc 	.word	0x200000bc

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	200000c0 	.word	0x200000c0
 8001db4:	200001a8 	.word	0x200001a8

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	200001a8 	.word	0x200001a8

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db12      	blt.n	8001ea8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	490a      	ldr	r1, [pc, #40]	; (8001eb4 <__NVIC_DisableIRQ+0x44>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	3320      	adds	r3, #32
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e9c:	f3bf 8f4f 	dsb	sy
}
 8001ea0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ea2:	f3bf 8f6f 	isb	sy
}
 8001ea6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f98:	f7ff ff8e 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff05 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff1a 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff8e 	bl	8001f0c <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5d 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff0d 	bl	8001e34 <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff1d 	bl	8001e70 <__NVIC_DisableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ff94 	bl	8001f74 <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff fea8 	bl	8001db8 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d008      	beq.n	8002088 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e052      	b.n	800212e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0216 	bic.w	r2, r2, #22
 8002096:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <HAL_DMA_Abort+0x62>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0208 	bic.w	r2, r2, #8
 80020c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d8:	e013      	b.n	8002102 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020da:	f7ff fe6d 	bl	8001db8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d90c      	bls.n	8002102 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e015      	b.n	800212e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e4      	bne.n	80020da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002114:	223f      	movs	r2, #63	; 0x3f
 8002116:	409a      	lsls	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d004      	beq.n	8002154 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e00c      	b.n	800216e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2205      	movs	r2, #5
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e177      	b.n	8002488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8166 	bne.w	8002482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d005      	beq.n	80021ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d130      	bne.n	8002230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0201 	and.w	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b03      	cmp	r3, #3
 800223a:	d017      	beq.n	800226c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d123      	bne.n	80022c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	08da      	lsrs	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3208      	adds	r2, #8
 8002280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	220f      	movs	r2, #15
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	08da      	lsrs	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3208      	adds	r2, #8
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0203 	and.w	r2, r3, #3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80c0 	beq.w	8002482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a65      	ldr	r2, [pc, #404]	; (80024a0 <HAL_GPIO_Init+0x324>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231e:	4a61      	ldr	r2, [pc, #388]	; (80024a4 <HAL_GPIO_Init+0x328>)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_GPIO_Init+0x32c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d037      	beq.n	80023ba <HAL_GPIO_Init+0x23e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a57      	ldr	r2, [pc, #348]	; (80024ac <HAL_GPIO_Init+0x330>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_GPIO_Init+0x23a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a56      	ldr	r2, [pc, #344]	; (80024b0 <HAL_GPIO_Init+0x334>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02b      	beq.n	80023b2 <HAL_GPIO_Init+0x236>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a55      	ldr	r2, [pc, #340]	; (80024b4 <HAL_GPIO_Init+0x338>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x232>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a54      	ldr	r2, [pc, #336]	; (80024b8 <HAL_GPIO_Init+0x33c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x22e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a53      	ldr	r2, [pc, #332]	; (80024bc <HAL_GPIO_Init+0x340>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x22a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_GPIO_Init+0x344>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x226>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a51      	ldr	r2, [pc, #324]	; (80024c4 <HAL_GPIO_Init+0x348>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x222>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a50      	ldr	r2, [pc, #320]	; (80024c8 <HAL_GPIO_Init+0x34c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x21e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4f      	ldr	r2, [pc, #316]	; (80024cc <HAL_GPIO_Init+0x350>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x21a>
 8002392:	2309      	movs	r3, #9
 8002394:	e012      	b.n	80023bc <HAL_GPIO_Init+0x240>
 8002396:	230a      	movs	r3, #10
 8002398:	e010      	b.n	80023bc <HAL_GPIO_Init+0x240>
 800239a:	2308      	movs	r3, #8
 800239c:	e00e      	b.n	80023bc <HAL_GPIO_Init+0x240>
 800239e:	2307      	movs	r3, #7
 80023a0:	e00c      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023a2:	2306      	movs	r3, #6
 80023a4:	e00a      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x240>
 80023ba:	2300      	movs	r3, #0
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023cc:	4935      	ldr	r1, [pc, #212]	; (80024a4 <HAL_GPIO_Init+0x328>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_GPIO_Init+0x354>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <HAL_GPIO_Init+0x354>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b32      	ldr	r3, [pc, #200]	; (80024d0 <HAL_GPIO_Init+0x354>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a29      	ldr	r2, [pc, #164]	; (80024d0 <HAL_GPIO_Init+0x354>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_GPIO_Init+0x354>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002452:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_GPIO_Init+0x354>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_GPIO_Init+0x354>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_GPIO_Init+0x354>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	f67f ae84 	bls.w	8002198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40021c00 	.word	0x40021c00
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40022400 	.word	0x40022400
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e001      	b.n	80024f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002520:	e003      	b.n	800252a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	619a      	str	r2, [r3, #24]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e267      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d075      	beq.n	8002642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b04      	cmp	r3, #4
 8002560:	d00c      	beq.n	800257c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002562:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256a:	2b08      	cmp	r3, #8
 800256c:	d112      	bne.n	8002594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256e:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800257a:	d10b      	bne.n	8002594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	4b7e      	ldr	r3, [pc, #504]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d05b      	beq.n	8002640 <HAL_RCC_OscConfig+0x108>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d157      	bne.n	8002640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e242      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d106      	bne.n	80025ac <HAL_RCC_OscConfig+0x74>
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a75      	ldr	r2, [pc, #468]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e01d      	b.n	80025e8 <HAL_RCC_OscConfig+0xb0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x98>
 80025b6:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6f      	ldr	r2, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6c      	ldr	r2, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0xb0>
 80025d0:	4b69      	ldr	r3, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a68      	ldr	r2, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a65      	ldr	r2, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff fbe2 	bl	8001db8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f8:	f7ff fbde 	bl	8001db8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e207      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0xc0>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fbce 	bl	8001db8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002620:	f7ff fbca 	bl	8001db8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1f3      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	4b51      	ldr	r3, [pc, #324]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0xe8>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800264e:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002662:	2b08      	cmp	r3, #8
 8002664:	d11c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d116      	bne.n	80026a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x152>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e1c7      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4937      	ldr	r1, [pc, #220]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	e03a      	b.n	8002716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_OscConfig+0x244>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7ff fb83 	bl	8001db8 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b6:	f7ff fb7f 	bl	8001db8 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e1a8      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4925      	ldr	r1, [pc, #148]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_OscConfig+0x244>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7ff fb62 	bl	8001db8 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f8:	f7ff fb5e 	bl	8001db8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e187      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d036      	beq.n	8002790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_RCC_OscConfig+0x248>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7ff fb42 	bl	8001db8 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002738:	f7ff fb3e 	bl	8001db8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e167      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x240>)
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x200>
 8002756:	e01b      	b.n	8002790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x248>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7ff fb2b 	bl	8001db8 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	e00e      	b.n	8002784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002766:	f7ff fb27 	bl	8001db8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d907      	bls.n	8002784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e150      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
 8002778:	40023800 	.word	0x40023800
 800277c:	42470000 	.word	0x42470000
 8002780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b88      	ldr	r3, [pc, #544]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ea      	bne.n	8002766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8097 	beq.w	80028cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b7d      	ldr	r3, [pc, #500]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a7c      	ldr	r2, [pc, #496]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b7a      	ldr	r3, [pc, #488]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b77      	ldr	r3, [pc, #476]	; (80029ac <HAL_RCC_OscConfig+0x474>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d118      	bne.n	800280c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027da:	4b74      	ldr	r3, [pc, #464]	; (80029ac <HAL_RCC_OscConfig+0x474>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a73      	ldr	r2, [pc, #460]	; (80029ac <HAL_RCC_OscConfig+0x474>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7ff fae7 	bl	8001db8 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ee:	f7ff fae3 	bl	8001db8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e10c      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <HAL_RCC_OscConfig+0x474>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x2ea>
 8002814:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a63      	ldr	r2, [pc, #396]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	e01c      	b.n	800285c <HAL_RCC_OscConfig+0x324>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b05      	cmp	r3, #5
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x30c>
 800282a:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a5e      	ldr	r2, [pc, #376]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a5b      	ldr	r2, [pc, #364]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0x324>
 8002844:	4b58      	ldr	r3, [pc, #352]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a57      	ldr	r2, [pc, #348]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6713      	str	r3, [r2, #112]	; 0x70
 8002850:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a54      	ldr	r2, [pc, #336]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d015      	beq.n	8002890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7ff faa8 	bl	8001db8 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7ff faa4 	bl	8001db8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0cb      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ee      	beq.n	800286c <HAL_RCC_OscConfig+0x334>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7ff fa92 	bl	8001db8 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7ff fa8e 	bl	8001db8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0b5      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1ee      	bne.n	8002898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	4a38      	ldr	r2, [pc, #224]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80a1 	beq.w	8002a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d05c      	beq.n	800299c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d141      	bne.n	800296e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCC_OscConfig+0x478>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff fa62 	bl	8001db8 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff fa5e 	bl	8001db8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e087      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	019b      	lsls	r3, r3, #6
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	3b01      	subs	r3, #1
 8002930:	041b      	lsls	r3, r3, #16
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	491b      	ldr	r1, [pc, #108]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x478>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7ff fa37 	bl	8001db8 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7ff fa33 	bl	8001db8 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e05c      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x416>
 800296c:	e054      	b.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_RCC_OscConfig+0x478>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7ff fa20 	bl	8001db8 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7ff fa1c 	bl	8001db8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e045      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_OscConfig+0x470>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x444>
 800299a:	e03d      	b.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e038      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
 80029b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x4ec>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d028      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d121      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d11a      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d111      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0cc      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d90c      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a52      	ldr	r2, [pc, #328]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d044      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d107      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e067      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 0203 	bic.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4934      	ldr	r1, [pc, #208]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b18:	f7ff f94e 	bl	8001db8 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7ff f94a 	bl	8001db8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e04f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d1eb      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d20c      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f821 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f8ae 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023c00 	.word	0x40023c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	080052a4 	.word	0x080052a4
 8002bec:	200000b8 	.word	0x200000b8
 8002bf0:	200000bc 	.word	0x200000bc

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf8:	b090      	sub	sp, #64	; 0x40
 8002bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002c00:	2300      	movs	r3, #0
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c04:	2300      	movs	r3, #0
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d00d      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x40>
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	f200 80a1 	bhi.w	8002d60 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x34>
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c26:	e09b      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c2c:	e09b      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c2e:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c32:	e098      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c34:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c3e:	4b4d      	ldr	r3, [pc, #308]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d028      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	099b      	lsrs	r3, r3, #6
 8002c50:	2200      	movs	r2, #0
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	627a      	str	r2, [r7, #36]	; 0x24
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c60:	fb03 f201 	mul.w	r2, r3, r1
 8002c64:	2300      	movs	r3, #0
 8002c66:	fb00 f303 	mul.w	r3, r0, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a43      	ldr	r2, [pc, #268]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c6e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c74:	460a      	mov	r2, r1
 8002c76:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7a:	4413      	add	r3, r2
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c80:	2200      	movs	r2, #0
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	61fa      	str	r2, [r7, #28]
 8002c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c8e:	f7fd ff43 	bl	8000b18 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4613      	mov	r3, r2
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9a:	e053      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	617a      	str	r2, [r7, #20]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cae:	f04f 0b00 	mov.w	fp, #0
 8002cb2:	4652      	mov	r2, sl
 8002cb4:	465b      	mov	r3, fp
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	0159      	lsls	r1, r3, #5
 8002cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc4:	0150      	lsls	r0, r2, #5
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	ebb2 080a 	subs.w	r8, r2, sl
 8002cce:	eb63 090b 	sbc.w	r9, r3, fp
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ce2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ce6:	ebb2 0408 	subs.w	r4, r2, r8
 8002cea:	eb63 0509 	sbc.w	r5, r3, r9
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	00eb      	lsls	r3, r5, #3
 8002cf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cfc:	00e2      	lsls	r2, r4, #3
 8002cfe:	4614      	mov	r4, r2
 8002d00:	461d      	mov	r5, r3
 8002d02:	eb14 030a 	adds.w	r3, r4, sl
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	eb45 030b 	adc.w	r3, r5, fp
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	028b      	lsls	r3, r1, #10
 8002d1e:	4621      	mov	r1, r4
 8002d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d24:	4621      	mov	r1, r4
 8002d26:	028a      	lsls	r2, r1, #10
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d38:	f7fd feee 	bl	8000b18 <__aeabi_uldivmod>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4613      	mov	r3, r2
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3740      	adds	r7, #64	; 0x40
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	00f42400 	.word	0x00f42400
 8002d7c:	017d7840 	.word	0x017d7840

08002d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	200000b8 	.word	0x200000b8

08002d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d9c:	f7ff fff0 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	0a9b      	lsrs	r3, r3, #10
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	4903      	ldr	r1, [pc, #12]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	080052b4 	.word	0x080052b4

08002dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dc4:	f7ff ffdc 	bl	8002d80 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	0b5b      	lsrs	r3, r3, #13
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	080052b4 	.word	0x080052b4

08002de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e03f      	b.n	8002e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe feac 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	; 0x24
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f001 f839 	bl	8003ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08a      	sub	sp, #40	; 0x28
 8002e86:	af02      	add	r7, sp, #8
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d17c      	bne.n	8002f9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_UART_Transmit+0x2c>
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e075      	b.n	8002f9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_UART_Transmit+0x3e>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e06e      	b.n	8002f9e <HAL_UART_Transmit+0x11c>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2221      	movs	r2, #33	; 0x21
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe ff6f 	bl	8001db8 <HAL_GetTick>
 8002eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	88fa      	ldrh	r2, [r7, #6]
 8002ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d108      	bne.n	8002f04 <HAL_UART_Transmit+0x82>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e003      	b.n	8002f0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f14:	e02a      	b.n	8002f6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fd19 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e036      	b.n	8002f9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1cf      	bne.n	8002f16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2140      	movs	r1, #64	; 0x40
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fce9 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e006      	b.n	8002f9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b08a      	sub	sp, #40	; 0x28
 8002faa:	af02      	add	r7, sp, #8
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	f040 808c 	bne.w	80030e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_UART_Receive+0x2e>
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e084      	b.n	80030e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Receive+0x40>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e07d      	b.n	80030e2 <HAL_UART_Receive+0x13c>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2222      	movs	r2, #34	; 0x22
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fe fed9 	bl	8001db8 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	d108      	bne.n	8003030 <HAL_UART_Receive+0x8a>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e003      	b.n	8003038 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003040:	e043      	b.n	80030ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	2120      	movs	r1, #32
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fc83 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e042      	b.n	80030e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	b29b      	uxth	r3, r3
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	b29a      	uxth	r2, r3
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	3302      	adds	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e01f      	b.n	80030bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d007      	beq.n	8003096 <HAL_UART_Receive+0xf0>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <HAL_UART_Receive+0xfe>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e008      	b.n	80030b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1b6      	bne.n	8003042 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	4613      	mov	r3, r2
 80030f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b20      	cmp	r3, #32
 8003102:	d130      	bne.n	8003166 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Transmit_IT+0x26>
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e029      	b.n	8003168 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_UART_Transmit_IT+0x38>
 800311e:	2302      	movs	r3, #2
 8003120:	e022      	b.n	8003168 <HAL_UART_Transmit_IT+0x7e>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	88fa      	ldrh	r2, [r7, #6]
 8003134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2221      	movs	r2, #33	; 0x21
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003160:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
  }
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b20      	cmp	r3, #32
 800318c:	d11d      	bne.n	80031ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_UART_Receive_IT+0x26>
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e016      	b.n	80031cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_UART_Receive_IT+0x38>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e00f      	b.n	80031cc <HAL_UART_Receive_IT+0x58>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	461a      	mov	r2, r3
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fc37 	bl	8003a34 <UART_Start_Receive_IT>
 80031c6:	4603      	mov	r3, r0
 80031c8:	e000      	b.n	80031cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b0a2      	sub	sp, #136	; 0x88
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80031dc:	2301      	movs	r3, #1
 80031de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80031f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003206:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003208:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800320c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e3      	bne.n	80031e2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3314      	adds	r3, #20
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800322a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3314      	adds	r3, #20
 8003238:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800323a:	65ba      	str	r2, [r7, #88]	; 0x58
 800323c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e5      	bne.n	800321a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	2b01      	cmp	r3, #1
 8003254:	d119      	bne.n	800328a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003268:	f023 0310 	bic.w	r3, r3, #16
 800326c:	67bb      	str	r3, [r7, #120]	; 0x78
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003276:	647a      	str	r2, [r7, #68]	; 0x44
 8003278:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800327c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e5      	bne.n	8003256 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00f      	beq.n	80032b2 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329c:	2b80      	cmp	r3, #128	; 0x80
 800329e:	d104      	bne.n	80032aa <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	4a53      	ldr	r2, [pc, #332]	; (80033f4 <HAL_UART_Abort_IT+0x220>)
 80032a6:	651a      	str	r2, [r3, #80]	; 0x50
 80032a8:	e003      	b.n	80032b2 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	2200      	movs	r2, #0
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00f      	beq.n	80032da <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b40      	cmp	r3, #64	; 0x40
 80032c6:	d104      	bne.n	80032d2 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	4a4a      	ldr	r2, [pc, #296]	; (80033f8 <HAL_UART_Abort_IT+0x224>)
 80032ce:	651a      	str	r2, [r3, #80]	; 0x50
 80032d0:	e003      	b.n	80032da <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	2200      	movs	r2, #0
 80032d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d12d      	bne.n	8003344 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3314      	adds	r3, #20
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	623b      	str	r3, [r7, #32]
   return(result);
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fe:	677b      	str	r3, [r7, #116]	; 0x74
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3314      	adds	r3, #20
 8003306:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003308:	633a      	str	r2, [r7, #48]	; 0x30
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800330e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003310:	e841 2300 	strex	r3, r2, [r1]
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e5      	bne.n	80032e8 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00f      	beq.n	8003344 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe ff04 	bl	8002136 <HAL_DMA_Abort_IT>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	2200      	movs	r2, #0
 800333a:	651a      	str	r2, [r3, #80]	; 0x50
 800333c:	e002      	b.n	8003344 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d130      	bne.n	80033b4 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	60fb      	str	r3, [r7, #12]
   return(result);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003368:	673b      	str	r3, [r7, #112]	; 0x70
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003372:	61fa      	str	r2, [r7, #28]
 8003374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	617b      	str	r3, [r7, #20]
   return(result);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e5      	bne.n	8003352 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fecf 	bl	8002136 <HAL_DMA_Abort_IT>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	2200      	movs	r2, #0
 80033a4:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033ac:	e002      	b.n	80033b4 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80033b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d116      	bne.n	80033ea <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 faa1 	bl	800392c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3788      	adds	r7, #136	; 0x88
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	08003b9f 	.word	0x08003b9f
 80033f8:	08003bff 	.word	0x08003bff

080033fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b0ba      	sub	sp, #232	; 0xe8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800343a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10f      	bne.n	8003462 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_UART_IRQHandler+0x66>
 800344e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fc67 	bl	8003d2e <UART_Receive_IT>
      return;
 8003460:	e256      	b.n	8003910 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80de 	beq.w	8003628 <HAL_UART_IRQHandler+0x22c>
 800346c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800347c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80d1 	beq.w	8003628 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_UART_IRQHandler+0xae>
 8003492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f043 0201 	orr.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_UART_IRQHandler+0xd2>
 80034b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f043 0202 	orr.w	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_UART_IRQHandler+0xf6>
 80034da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0204 	orr.w	r2, r3, #4
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d011      	beq.n	8003522 <HAL_UART_IRQHandler+0x126>
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800350a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f043 0208 	orr.w	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 81ed 	beq.w	8003906 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_UART_IRQHandler+0x14e>
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fbf2 	bl	8003d2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d103      	bne.n	8003576 <HAL_UART_IRQHandler+0x17a>
 800356e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d04f      	beq.n	8003616 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa9a 	bl	8003ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d141      	bne.n	800360e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3314      	adds	r3, #20
 80035b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1d9      	bne.n	800358a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d013      	beq.n	8003606 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	4a7d      	ldr	r2, [pc, #500]	; (80037d8 <HAL_UART_IRQHandler+0x3dc>)
 80035e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fda3 	bl	8002136 <HAL_DMA_Abort_IT>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d016      	beq.n	8003624 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003600:	4610      	mov	r0, r2
 8003602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e00e      	b.n	8003624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f986 	bl	8003918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	e00a      	b.n	8003624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f982 	bl	8003918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	e006      	b.n	8003624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f97e 	bl	8003918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003622:	e170      	b.n	8003906 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	bf00      	nop
    return;
 8003626:	e16e      	b.n	8003906 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	2b01      	cmp	r3, #1
 800362e:	f040 814a 	bne.w	80038c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8143 	beq.w	80038c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 813c 	beq.w	80038c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	f040 80b4 	bne.w	80037dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8140 	beq.w	800390a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800368e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003692:	429a      	cmp	r2, r3
 8003694:	f080 8139 	bcs.w	800390a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800369e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	f000 8088 	beq.w	80037be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	330c      	adds	r3, #12
 80036d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1d9      	bne.n	80036ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3314      	adds	r3, #20
 8003700:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800370a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3314      	adds	r3, #20
 800371a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800371e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003722:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003726:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e1      	bne.n	80036fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3314      	adds	r3, #20
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3314      	adds	r3, #20
 8003756:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800375a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800375c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003760:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e3      	bne.n	8003736 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	330c      	adds	r3, #12
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800378c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378e:	f023 0310 	bic.w	r3, r3, #16
 8003792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80037a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e3      	bne.n	800377c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fc4c 	bl	8002056 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8b6 	bl	8003940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037d4:	e099      	b.n	800390a <HAL_UART_IRQHandler+0x50e>
 80037d6:	bf00      	nop
 80037d8:	08003b77 	.word	0x08003b77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 808b 	beq.w	800390e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8086 	beq.w	800390e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003826:	647a      	str	r2, [r7, #68]	; 0x44
 8003828:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800382c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e3      	bne.n	8003802 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3314      	adds	r3, #20
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	623b      	str	r3, [r7, #32]
   return(result);
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800385e:	633a      	str	r2, [r7, #48]	; 0x30
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e3      	bne.n	800383a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0310 	bic.w	r3, r3, #16
 8003896:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038a4:	61fa      	str	r2, [r7, #28]
 80038a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	617b      	str	r3, [r7, #20]
   return(result);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e3      	bne.n	8003880 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f83e 	bl	8003940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038c4:	e023      	b.n	800390e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_UART_IRQHandler+0x4ea>
 80038d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9bd 	bl	8003c5e <UART_Transmit_IT>
    return;
 80038e4:	e014      	b.n	8003910 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00e      	beq.n	8003910 <HAL_UART_IRQHandler+0x514>
 80038f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f9fd 	bl	8003cfe <UART_EndTransmit_IT>
    return;
 8003904:	e004      	b.n	8003910 <HAL_UART_IRQHandler+0x514>
    return;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <HAL_UART_IRQHandler+0x514>
      return;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HAL_UART_IRQHandler+0x514>
      return;
 800390e:	bf00      	nop
  }
}
 8003910:	37e8      	adds	r7, #232	; 0xe8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop

08003918 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b090      	sub	sp, #64	; 0x40
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003968:	e050      	b.n	8003a0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003970:	d04c      	beq.n	8003a0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <UART_WaitOnFlagUntilTimeout+0x30>
 8003978:	f7fe fa1e 	bl	8001db8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003984:	429a      	cmp	r2, r3
 8003986:	d241      	bcs.n	8003a0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039a8:	637a      	str	r2, [r7, #52]	; 0x34
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	613b      	str	r3, [r7, #16]
   return(result);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039dc:	623a      	str	r2, [r7, #32]
 80039de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	69f9      	ldr	r1, [r7, #28]
 80039e2:	6a3a      	ldr	r2, [r7, #32]
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e5      	bne.n	80039bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e00f      	b.n	8003a2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d09f      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3740      	adds	r7, #64	; 0x40
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	88fa      	ldrh	r2, [r7, #6]
 8003a4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2222      	movs	r2, #34	; 0x22
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0220 	orr.w	r2, r2, #32
 8003aa0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b095      	sub	sp, #84	; 0x54
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ad8:	643a      	str	r2, [r7, #64]	; 0x40
 8003ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e5      	bne.n	8003ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3314      	adds	r3, #20
 8003af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3314      	adds	r3, #20
 8003b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e5      	bne.n	8003aec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d119      	bne.n	8003b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b48:	61ba      	str	r2, [r7, #24]
 8003b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6979      	ldr	r1, [r7, #20]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	613b      	str	r3, [r7, #16]
   return(result);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e5      	bne.n	8003b28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b6a:	bf00      	nop
 8003b6c:	3754      	adds	r7, #84	; 0x54
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fec1 	bl	8003918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d117      	bne.n	8003bf6 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff fe9c 	bl	800392c <HAL_UART_AbortCpltCallback>
 8003bf4:	e000      	b.n	8003bf8 <UART_DMATxAbortCallback+0x5a>
      return;
 8003bf6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	2200      	movs	r2, #0
 8003c12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d117      	bne.n	8003c56 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f7ff fe6c 	bl	800392c <HAL_UART_AbortCpltCallback>
 8003c54:	e000      	b.n	8003c58 <UART_DMARxAbortCallback+0x5a>
      return;
 8003c56:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b21      	cmp	r3, #33	; 0x21
 8003c70:	d13e      	bne.n	8003cf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	d114      	bne.n	8003ca6 <UART_Transmit_IT+0x48>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d110      	bne.n	8003ca6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	1c9a      	adds	r2, r3, #2
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	621a      	str	r2, [r3, #32]
 8003ca4:	e008      	b.n	8003cb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	1c59      	adds	r1, r3, #1
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6211      	str	r1, [r2, #32]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10f      	bne.n	8003cec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fa1a 	bl	8001158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08c      	sub	sp, #48	; 0x30
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b22      	cmp	r3, #34	; 0x22
 8003d40:	f040 80ab 	bne.w	8003e9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d117      	bne.n	8003d7e <UART_Receive_IT+0x50>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d113      	bne.n	8003d7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d7c:	e026      	b.n	8003dcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d90:	d007      	beq.n	8003da2 <UART_Receive_IT+0x74>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <UART_Receive_IT+0x82>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	e008      	b.n	8003dc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d15a      	bne.n	8003e96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0220 	bic.w	r2, r2, #32
 8003dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d135      	bne.n	8003e8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	613b      	str	r3, [r7, #16]
   return(result);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f023 0310 	bic.w	r3, r3, #16
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	623a      	str	r2, [r7, #32]
 8003e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	69f9      	ldr	r1, [r7, #28]
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e5      	bne.n	8003e26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d10a      	bne.n	8003e7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e82:	4619      	mov	r1, r3
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fd5b 	bl	8003940 <HAL_UARTEx_RxEventCallback>
 8003e8a:	e002      	b.n	8003e92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fd f94d 	bl	800112c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e002      	b.n	8003e9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3730      	adds	r7, #48	; 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ea8:	b0c0      	sub	sp, #256	; 0x100
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	ea40 0301 	orr.w	r3, r0, r1
 8003ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003efc:	f021 010c 	bic.w	r1, r1, #12
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1e:	6999      	ldr	r1, [r3, #24]
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	ea40 0301 	orr.w	r3, r0, r1
 8003f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b8f      	ldr	r3, [pc, #572]	; (8004170 <UART_SetConfig+0x2cc>)
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d005      	beq.n	8003f44 <UART_SetConfig+0xa0>
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b8d      	ldr	r3, [pc, #564]	; (8004174 <UART_SetConfig+0x2d0>)
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d104      	bne.n	8003f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f44:	f7fe ff3c 	bl	8002dc0 <HAL_RCC_GetPCLK2Freq>
 8003f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f4c:	e003      	b.n	8003f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f4e:	f7fe ff23 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 8003f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f60:	f040 810c 	bne.w	800417c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	1891      	adds	r1, r2, r2
 8003f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f7e:	415b      	adcs	r3, r3
 8003f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f86:	4621      	mov	r1, r4
 8003f88:	eb12 0801 	adds.w	r8, r2, r1
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	eb43 0901 	adc.w	r9, r3, r1
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fa6:	4690      	mov	r8, r2
 8003fa8:	4699      	mov	r9, r3
 8003faa:	4623      	mov	r3, r4
 8003fac:	eb18 0303 	adds.w	r3, r8, r3
 8003fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	eb49 0303 	adc.w	r3, r9, r3
 8003fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	18db      	adds	r3, r3, r3
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd8:	4613      	mov	r3, r2
 8003fda:	eb42 0303 	adc.w	r3, r2, r3
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fe8:	f7fc fd96 	bl	8000b18 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b61      	ldr	r3, [pc, #388]	; (8004178 <UART_SetConfig+0x2d4>)
 8003ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	011c      	lsls	r4, r3, #4
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	1891      	adds	r1, r2, r2
 8004012:	64b9      	str	r1, [r7, #72]	; 0x48
 8004014:	415b      	adcs	r3, r3
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800401c:	4641      	mov	r1, r8
 800401e:	eb12 0a01 	adds.w	sl, r2, r1
 8004022:	4649      	mov	r1, r9
 8004024:	eb43 0b01 	adc.w	fp, r3, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800403c:	4692      	mov	sl, r2
 800403e:	469b      	mov	fp, r3
 8004040:	4643      	mov	r3, r8
 8004042:	eb1a 0303 	adds.w	r3, sl, r3
 8004046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800404a:	464b      	mov	r3, r9
 800404c:	eb4b 0303 	adc.w	r3, fp, r3
 8004050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004068:	460b      	mov	r3, r1
 800406a:	18db      	adds	r3, r3, r3
 800406c:	643b      	str	r3, [r7, #64]	; 0x40
 800406e:	4613      	mov	r3, r2
 8004070:	eb42 0303 	adc.w	r3, r2, r3
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
 8004076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800407a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800407e:	f7fc fd4b 	bl	8000b18 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4611      	mov	r1, r2
 8004088:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <UART_SetConfig+0x2d4>)
 800408a:	fba3 2301 	umull	r2, r3, r3, r1
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2264      	movs	r2, #100	; 0x64
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <UART_SetConfig+0x2d4>)
 80040a0:	fba3 2302 	umull	r2, r3, r3, r2
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040ac:	441c      	add	r4, r3
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80040c8:	415b      	adcs	r3, r3
 80040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6339      	str	r1, [r7, #48]	; 0x30
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800411c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004124:	460b      	mov	r3, r1
 8004126:	18db      	adds	r3, r3, r3
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
 800412a:	4613      	mov	r3, r2
 800412c:	eb42 0303 	adc.w	r3, r2, r3
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800413a:	f7fc fced 	bl	8000b18 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <UART_SetConfig+0x2d4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	; 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <UART_SetConfig+0x2d4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 0207 	and.w	r2, r3, #7
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4422      	add	r2, r4
 800416a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800416c:	e105      	b.n	800437a <UART_SetConfig+0x4d6>
 800416e:	bf00      	nop
 8004170:	40011000 	.word	0x40011000
 8004174:	40011400 	.word	0x40011400
 8004178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800417c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004180:	2200      	movs	r2, #0
 8004182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800418a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800418e:	4642      	mov	r2, r8
 8004190:	464b      	mov	r3, r9
 8004192:	1891      	adds	r1, r2, r2
 8004194:	6239      	str	r1, [r7, #32]
 8004196:	415b      	adcs	r3, r3
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800419e:	4641      	mov	r1, r8
 80041a0:	1854      	adds	r4, r2, r1
 80041a2:	4649      	mov	r1, r9
 80041a4:	eb43 0501 	adc.w	r5, r3, r1
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	00eb      	lsls	r3, r5, #3
 80041b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b6:	00e2      	lsls	r2, r4, #3
 80041b8:	4614      	mov	r4, r2
 80041ba:	461d      	mov	r5, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	18e3      	adds	r3, r4, r3
 80041c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041c4:	464b      	mov	r3, r9
 80041c6:	eb45 0303 	adc.w	r3, r5, r3
 80041ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041ea:	4629      	mov	r1, r5
 80041ec:	008b      	lsls	r3, r1, #2
 80041ee:	4621      	mov	r1, r4
 80041f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f4:	4621      	mov	r1, r4
 80041f6:	008a      	lsls	r2, r1, #2
 80041f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041fc:	f7fc fc8c 	bl	8000b18 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b60      	ldr	r3, [pc, #384]	; (8004388 <UART_SetConfig+0x4e4>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011c      	lsls	r4, r3, #4
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800421c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	61b9      	str	r1, [r7, #24]
 8004228:	415b      	adcs	r3, r3
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004230:	4641      	mov	r1, r8
 8004232:	1851      	adds	r1, r2, r1
 8004234:	6139      	str	r1, [r7, #16]
 8004236:	4649      	mov	r1, r9
 8004238:	414b      	adcs	r3, r1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004248:	4659      	mov	r1, fp
 800424a:	00cb      	lsls	r3, r1, #3
 800424c:	4651      	mov	r1, sl
 800424e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004252:	4651      	mov	r1, sl
 8004254:	00ca      	lsls	r2, r1, #3
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	4603      	mov	r3, r0
 800425c:	4642      	mov	r2, r8
 800425e:	189b      	adds	r3, r3, r2
 8004260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004264:	464b      	mov	r3, r9
 8004266:	460a      	mov	r2, r1
 8004268:	eb42 0303 	adc.w	r3, r2, r3
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	67bb      	str	r3, [r7, #120]	; 0x78
 800427a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004288:	4649      	mov	r1, r9
 800428a:	008b      	lsls	r3, r1, #2
 800428c:	4641      	mov	r1, r8
 800428e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004292:	4641      	mov	r1, r8
 8004294:	008a      	lsls	r2, r1, #2
 8004296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800429a:	f7fc fc3d 	bl	8000b18 <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <UART_SetConfig+0x4e4>)
 80042a4:	fba3 1302 	umull	r1, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	2164      	movs	r1, #100	; 0x64
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	3332      	adds	r3, #50	; 0x32
 80042b6:	4a34      	ldr	r2, [pc, #208]	; (8004388 <UART_SetConfig+0x4e4>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c2:	441c      	add	r4, r3
 80042c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c8:	2200      	movs	r2, #0
 80042ca:	673b      	str	r3, [r7, #112]	; 0x70
 80042cc:	677a      	str	r2, [r7, #116]	; 0x74
 80042ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042d2:	4642      	mov	r2, r8
 80042d4:	464b      	mov	r3, r9
 80042d6:	1891      	adds	r1, r2, r2
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	415b      	adcs	r3, r3
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e2:	4641      	mov	r1, r8
 80042e4:	1851      	adds	r1, r2, r1
 80042e6:	6039      	str	r1, [r7, #0]
 80042e8:	4649      	mov	r1, r9
 80042ea:	414b      	adcs	r3, r1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042fa:	4659      	mov	r1, fp
 80042fc:	00cb      	lsls	r3, r1, #3
 80042fe:	4651      	mov	r1, sl
 8004300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004304:	4651      	mov	r1, sl
 8004306:	00ca      	lsls	r2, r1, #3
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	4603      	mov	r3, r0
 800430e:	4642      	mov	r2, r8
 8004310:	189b      	adds	r3, r3, r2
 8004312:	66bb      	str	r3, [r7, #104]	; 0x68
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	663b      	str	r3, [r7, #96]	; 0x60
 8004328:	667a      	str	r2, [r7, #100]	; 0x64
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004336:	4649      	mov	r1, r9
 8004338:	008b      	lsls	r3, r1, #2
 800433a:	4641      	mov	r1, r8
 800433c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004340:	4641      	mov	r1, r8
 8004342:	008a      	lsls	r2, r1, #2
 8004344:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004348:	f7fc fbe6 	bl	8000b18 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <UART_SetConfig+0x4e4>)
 8004352:	fba3 1302 	umull	r1, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2164      	movs	r1, #100	; 0x64
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	3332      	adds	r3, #50	; 0x32
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <UART_SetConfig+0x4e4>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	f003 020f 	and.w	r2, r3, #15
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4422      	add	r2, r4
 8004378:	609a      	str	r2, [r3, #8]
}
 800437a:	bf00      	nop
 800437c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004380:	46bd      	mov	sp, r7
 8004382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004386:	bf00      	nop
 8004388:	51eb851f 	.word	0x51eb851f

0800438c <__errno>:
 800438c:	4b01      	ldr	r3, [pc, #4]	; (8004394 <__errno+0x8>)
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	200000c4 	.word	0x200000c4

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4d0d      	ldr	r5, [pc, #52]	; (80043d0 <__libc_init_array+0x38>)
 800439c:	4c0d      	ldr	r4, [pc, #52]	; (80043d4 <__libc_init_array+0x3c>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	2600      	movs	r6, #0
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	4d0b      	ldr	r5, [pc, #44]	; (80043d8 <__libc_init_array+0x40>)
 80043aa:	4c0c      	ldr	r4, [pc, #48]	; (80043dc <__libc_init_array+0x44>)
 80043ac:	f000 ff3a 	bl	8005224 <_init>
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	2600      	movs	r6, #0
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	080052f8 	.word	0x080052f8
 80043d4:	080052f8 	.word	0x080052f8
 80043d8:	080052f8 	.word	0x080052f8
 80043dc:	080052fc 	.word	0x080052fc

080043e0 <memset>:
 80043e0:	4402      	add	r2, r0
 80043e2:	4603      	mov	r3, r0
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d100      	bne.n	80043ea <memset+0xa>
 80043e8:	4770      	bx	lr
 80043ea:	f803 1b01 	strb.w	r1, [r3], #1
 80043ee:	e7f9      	b.n	80043e4 <memset+0x4>

080043f0 <pow>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	ed2d 8b02 	vpush	{d8}
 80043f6:	eeb0 8a40 	vmov.f32	s16, s0
 80043fa:	eef0 8a60 	vmov.f32	s17, s1
 80043fe:	ec55 4b11 	vmov	r4, r5, d1
 8004402:	f000 f865 	bl	80044d0 <__ieee754_pow>
 8004406:	4622      	mov	r2, r4
 8004408:	462b      	mov	r3, r5
 800440a:	4620      	mov	r0, r4
 800440c:	4629      	mov	r1, r5
 800440e:	ec57 6b10 	vmov	r6, r7, d0
 8004412:	f7fc fb43 	bl	8000a9c <__aeabi_dcmpun>
 8004416:	2800      	cmp	r0, #0
 8004418:	d13b      	bne.n	8004492 <pow+0xa2>
 800441a:	ec51 0b18 	vmov	r0, r1, d8
 800441e:	2200      	movs	r2, #0
 8004420:	2300      	movs	r3, #0
 8004422:	f7fc fb09 	bl	8000a38 <__aeabi_dcmpeq>
 8004426:	b1b8      	cbz	r0, 8004458 <pow+0x68>
 8004428:	2200      	movs	r2, #0
 800442a:	2300      	movs	r3, #0
 800442c:	4620      	mov	r0, r4
 800442e:	4629      	mov	r1, r5
 8004430:	f7fc fb02 	bl	8000a38 <__aeabi_dcmpeq>
 8004434:	2800      	cmp	r0, #0
 8004436:	d146      	bne.n	80044c6 <pow+0xd6>
 8004438:	ec45 4b10 	vmov	d0, r4, r5
 800443c:	f000 fe61 	bl	8005102 <finite>
 8004440:	b338      	cbz	r0, 8004492 <pow+0xa2>
 8004442:	2200      	movs	r2, #0
 8004444:	2300      	movs	r3, #0
 8004446:	4620      	mov	r0, r4
 8004448:	4629      	mov	r1, r5
 800444a:	f7fc faff 	bl	8000a4c <__aeabi_dcmplt>
 800444e:	b300      	cbz	r0, 8004492 <pow+0xa2>
 8004450:	f7ff ff9c 	bl	800438c <__errno>
 8004454:	2322      	movs	r3, #34	; 0x22
 8004456:	e01b      	b.n	8004490 <pow+0xa0>
 8004458:	ec47 6b10 	vmov	d0, r6, r7
 800445c:	f000 fe51 	bl	8005102 <finite>
 8004460:	b9e0      	cbnz	r0, 800449c <pow+0xac>
 8004462:	eeb0 0a48 	vmov.f32	s0, s16
 8004466:	eef0 0a68 	vmov.f32	s1, s17
 800446a:	f000 fe4a 	bl	8005102 <finite>
 800446e:	b1a8      	cbz	r0, 800449c <pow+0xac>
 8004470:	ec45 4b10 	vmov	d0, r4, r5
 8004474:	f000 fe45 	bl	8005102 <finite>
 8004478:	b180      	cbz	r0, 800449c <pow+0xac>
 800447a:	4632      	mov	r2, r6
 800447c:	463b      	mov	r3, r7
 800447e:	4630      	mov	r0, r6
 8004480:	4639      	mov	r1, r7
 8004482:	f7fc fb0b 	bl	8000a9c <__aeabi_dcmpun>
 8004486:	2800      	cmp	r0, #0
 8004488:	d0e2      	beq.n	8004450 <pow+0x60>
 800448a:	f7ff ff7f 	bl	800438c <__errno>
 800448e:	2321      	movs	r3, #33	; 0x21
 8004490:	6003      	str	r3, [r0, #0]
 8004492:	ecbd 8b02 	vpop	{d8}
 8004496:	ec47 6b10 	vmov	d0, r6, r7
 800449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800449c:	2200      	movs	r2, #0
 800449e:	2300      	movs	r3, #0
 80044a0:	4630      	mov	r0, r6
 80044a2:	4639      	mov	r1, r7
 80044a4:	f7fc fac8 	bl	8000a38 <__aeabi_dcmpeq>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d0f2      	beq.n	8004492 <pow+0xa2>
 80044ac:	eeb0 0a48 	vmov.f32	s0, s16
 80044b0:	eef0 0a68 	vmov.f32	s1, s17
 80044b4:	f000 fe25 	bl	8005102 <finite>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d0ea      	beq.n	8004492 <pow+0xa2>
 80044bc:	ec45 4b10 	vmov	d0, r4, r5
 80044c0:	f000 fe1f 	bl	8005102 <finite>
 80044c4:	e7c3      	b.n	800444e <pow+0x5e>
 80044c6:	4f01      	ldr	r7, [pc, #4]	; (80044cc <pow+0xdc>)
 80044c8:	2600      	movs	r6, #0
 80044ca:	e7e2      	b.n	8004492 <pow+0xa2>
 80044cc:	3ff00000 	.word	0x3ff00000

080044d0 <__ieee754_pow>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	ed2d 8b06 	vpush	{d8-d10}
 80044d8:	b089      	sub	sp, #36	; 0x24
 80044da:	ed8d 1b00 	vstr	d1, [sp]
 80044de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80044e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80044e6:	ea58 0102 	orrs.w	r1, r8, r2
 80044ea:	ec57 6b10 	vmov	r6, r7, d0
 80044ee:	d115      	bne.n	800451c <__ieee754_pow+0x4c>
 80044f0:	19b3      	adds	r3, r6, r6
 80044f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80044f6:	4152      	adcs	r2, r2
 80044f8:	4299      	cmp	r1, r3
 80044fa:	4b89      	ldr	r3, [pc, #548]	; (8004720 <__ieee754_pow+0x250>)
 80044fc:	4193      	sbcs	r3, r2
 80044fe:	f080 84d2 	bcs.w	8004ea6 <__ieee754_pow+0x9d6>
 8004502:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004506:	4630      	mov	r0, r6
 8004508:	4639      	mov	r1, r7
 800450a:	f7fb fe77 	bl	80001fc <__adddf3>
 800450e:	ec41 0b10 	vmov	d0, r0, r1
 8004512:	b009      	add	sp, #36	; 0x24
 8004514:	ecbd 8b06 	vpop	{d8-d10}
 8004518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451c:	4b81      	ldr	r3, [pc, #516]	; (8004724 <__ieee754_pow+0x254>)
 800451e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004522:	429c      	cmp	r4, r3
 8004524:	ee10 aa10 	vmov	sl, s0
 8004528:	463d      	mov	r5, r7
 800452a:	dc06      	bgt.n	800453a <__ieee754_pow+0x6a>
 800452c:	d101      	bne.n	8004532 <__ieee754_pow+0x62>
 800452e:	2e00      	cmp	r6, #0
 8004530:	d1e7      	bne.n	8004502 <__ieee754_pow+0x32>
 8004532:	4598      	cmp	r8, r3
 8004534:	dc01      	bgt.n	800453a <__ieee754_pow+0x6a>
 8004536:	d10f      	bne.n	8004558 <__ieee754_pow+0x88>
 8004538:	b172      	cbz	r2, 8004558 <__ieee754_pow+0x88>
 800453a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800453e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004542:	ea55 050a 	orrs.w	r5, r5, sl
 8004546:	d1dc      	bne.n	8004502 <__ieee754_pow+0x32>
 8004548:	e9dd 3200 	ldrd	r3, r2, [sp]
 800454c:	18db      	adds	r3, r3, r3
 800454e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004552:	4152      	adcs	r2, r2
 8004554:	429d      	cmp	r5, r3
 8004556:	e7d0      	b.n	80044fa <__ieee754_pow+0x2a>
 8004558:	2d00      	cmp	r5, #0
 800455a:	da3b      	bge.n	80045d4 <__ieee754_pow+0x104>
 800455c:	4b72      	ldr	r3, [pc, #456]	; (8004728 <__ieee754_pow+0x258>)
 800455e:	4598      	cmp	r8, r3
 8004560:	dc51      	bgt.n	8004606 <__ieee754_pow+0x136>
 8004562:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004566:	4598      	cmp	r8, r3
 8004568:	f340 84ac 	ble.w	8004ec4 <__ieee754_pow+0x9f4>
 800456c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004570:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004574:	2b14      	cmp	r3, #20
 8004576:	dd0f      	ble.n	8004598 <__ieee754_pow+0xc8>
 8004578:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800457c:	fa22 f103 	lsr.w	r1, r2, r3
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	4293      	cmp	r3, r2
 8004586:	f040 849d 	bne.w	8004ec4 <__ieee754_pow+0x9f4>
 800458a:	f001 0101 	and.w	r1, r1, #1
 800458e:	f1c1 0302 	rsb	r3, r1, #2
 8004592:	9304      	str	r3, [sp, #16]
 8004594:	b182      	cbz	r2, 80045b8 <__ieee754_pow+0xe8>
 8004596:	e05f      	b.n	8004658 <__ieee754_pow+0x188>
 8004598:	2a00      	cmp	r2, #0
 800459a:	d15b      	bne.n	8004654 <__ieee754_pow+0x184>
 800459c:	f1c3 0314 	rsb	r3, r3, #20
 80045a0:	fa48 f103 	asr.w	r1, r8, r3
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	4543      	cmp	r3, r8
 80045aa:	f040 8488 	bne.w	8004ebe <__ieee754_pow+0x9ee>
 80045ae:	f001 0101 	and.w	r1, r1, #1
 80045b2:	f1c1 0302 	rsb	r3, r1, #2
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	4b5c      	ldr	r3, [pc, #368]	; (800472c <__ieee754_pow+0x25c>)
 80045ba:	4598      	cmp	r8, r3
 80045bc:	d132      	bne.n	8004624 <__ieee754_pow+0x154>
 80045be:	f1b9 0f00 	cmp.w	r9, #0
 80045c2:	f280 8478 	bge.w	8004eb6 <__ieee754_pow+0x9e6>
 80045c6:	4959      	ldr	r1, [pc, #356]	; (800472c <__ieee754_pow+0x25c>)
 80045c8:	4632      	mov	r2, r6
 80045ca:	463b      	mov	r3, r7
 80045cc:	2000      	movs	r0, #0
 80045ce:	f7fc f8f5 	bl	80007bc <__aeabi_ddiv>
 80045d2:	e79c      	b.n	800450e <__ieee754_pow+0x3e>
 80045d4:	2300      	movs	r3, #0
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	2a00      	cmp	r2, #0
 80045da:	d13d      	bne.n	8004658 <__ieee754_pow+0x188>
 80045dc:	4b51      	ldr	r3, [pc, #324]	; (8004724 <__ieee754_pow+0x254>)
 80045de:	4598      	cmp	r8, r3
 80045e0:	d1ea      	bne.n	80045b8 <__ieee754_pow+0xe8>
 80045e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80045e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80045ea:	ea53 030a 	orrs.w	r3, r3, sl
 80045ee:	f000 845a 	beq.w	8004ea6 <__ieee754_pow+0x9d6>
 80045f2:	4b4f      	ldr	r3, [pc, #316]	; (8004730 <__ieee754_pow+0x260>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	dd08      	ble.n	800460a <__ieee754_pow+0x13a>
 80045f8:	f1b9 0f00 	cmp.w	r9, #0
 80045fc:	f2c0 8457 	blt.w	8004eae <__ieee754_pow+0x9de>
 8004600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004604:	e783      	b.n	800450e <__ieee754_pow+0x3e>
 8004606:	2302      	movs	r3, #2
 8004608:	e7e5      	b.n	80045d6 <__ieee754_pow+0x106>
 800460a:	f1b9 0f00 	cmp.w	r9, #0
 800460e:	f04f 0000 	mov.w	r0, #0
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	f6bf af7a 	bge.w	800450e <__ieee754_pow+0x3e>
 800461a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800461e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004622:	e774      	b.n	800450e <__ieee754_pow+0x3e>
 8004624:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004628:	d106      	bne.n	8004638 <__ieee754_pow+0x168>
 800462a:	4632      	mov	r2, r6
 800462c:	463b      	mov	r3, r7
 800462e:	4630      	mov	r0, r6
 8004630:	4639      	mov	r1, r7
 8004632:	f7fb ff99 	bl	8000568 <__aeabi_dmul>
 8004636:	e76a      	b.n	800450e <__ieee754_pow+0x3e>
 8004638:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <__ieee754_pow+0x264>)
 800463a:	4599      	cmp	r9, r3
 800463c:	d10c      	bne.n	8004658 <__ieee754_pow+0x188>
 800463e:	2d00      	cmp	r5, #0
 8004640:	db0a      	blt.n	8004658 <__ieee754_pow+0x188>
 8004642:	ec47 6b10 	vmov	d0, r6, r7
 8004646:	b009      	add	sp, #36	; 0x24
 8004648:	ecbd 8b06 	vpop	{d8-d10}
 800464c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	f000 bc6c 	b.w	8004f2c <__ieee754_sqrt>
 8004654:	2300      	movs	r3, #0
 8004656:	9304      	str	r3, [sp, #16]
 8004658:	ec47 6b10 	vmov	d0, r6, r7
 800465c:	f000 fd48 	bl	80050f0 <fabs>
 8004660:	ec51 0b10 	vmov	r0, r1, d0
 8004664:	f1ba 0f00 	cmp.w	sl, #0
 8004668:	d129      	bne.n	80046be <__ieee754_pow+0x1ee>
 800466a:	b124      	cbz	r4, 8004676 <__ieee754_pow+0x1a6>
 800466c:	4b2f      	ldr	r3, [pc, #188]	; (800472c <__ieee754_pow+0x25c>)
 800466e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004672:	429a      	cmp	r2, r3
 8004674:	d123      	bne.n	80046be <__ieee754_pow+0x1ee>
 8004676:	f1b9 0f00 	cmp.w	r9, #0
 800467a:	da05      	bge.n	8004688 <__ieee754_pow+0x1b8>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	2000      	movs	r0, #0
 8004682:	492a      	ldr	r1, [pc, #168]	; (800472c <__ieee754_pow+0x25c>)
 8004684:	f7fc f89a 	bl	80007bc <__aeabi_ddiv>
 8004688:	2d00      	cmp	r5, #0
 800468a:	f6bf af40 	bge.w	800450e <__ieee754_pow+0x3e>
 800468e:	9b04      	ldr	r3, [sp, #16]
 8004690:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004694:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004698:	4323      	orrs	r3, r4
 800469a:	d108      	bne.n	80046ae <__ieee754_pow+0x1de>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	f7fb fda8 	bl	80001f8 <__aeabi_dsub>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e78f      	b.n	80045ce <__ieee754_pow+0xfe>
 80046ae:	9b04      	ldr	r3, [sp, #16]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f47f af2c 	bne.w	800450e <__ieee754_pow+0x3e>
 80046b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046ba:	4619      	mov	r1, r3
 80046bc:	e727      	b.n	800450e <__ieee754_pow+0x3e>
 80046be:	0feb      	lsrs	r3, r5, #31
 80046c0:	3b01      	subs	r3, #1
 80046c2:	9306      	str	r3, [sp, #24]
 80046c4:	9a06      	ldr	r2, [sp, #24]
 80046c6:	9b04      	ldr	r3, [sp, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	d102      	bne.n	80046d2 <__ieee754_pow+0x202>
 80046cc:	4632      	mov	r2, r6
 80046ce:	463b      	mov	r3, r7
 80046d0:	e7e6      	b.n	80046a0 <__ieee754_pow+0x1d0>
 80046d2:	4b19      	ldr	r3, [pc, #100]	; (8004738 <__ieee754_pow+0x268>)
 80046d4:	4598      	cmp	r8, r3
 80046d6:	f340 80fb 	ble.w	80048d0 <__ieee754_pow+0x400>
 80046da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80046de:	4598      	cmp	r8, r3
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <__ieee754_pow+0x260>)
 80046e2:	dd0c      	ble.n	80046fe <__ieee754_pow+0x22e>
 80046e4:	429c      	cmp	r4, r3
 80046e6:	dc0f      	bgt.n	8004708 <__ieee754_pow+0x238>
 80046e8:	f1b9 0f00 	cmp.w	r9, #0
 80046ec:	da0f      	bge.n	800470e <__ieee754_pow+0x23e>
 80046ee:	2000      	movs	r0, #0
 80046f0:	b009      	add	sp, #36	; 0x24
 80046f2:	ecbd 8b06 	vpop	{d8-d10}
 80046f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	f000 bcf0 	b.w	80050de <__math_oflow>
 80046fe:	429c      	cmp	r4, r3
 8004700:	dbf2      	blt.n	80046e8 <__ieee754_pow+0x218>
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <__ieee754_pow+0x25c>)
 8004704:	429c      	cmp	r4, r3
 8004706:	dd19      	ble.n	800473c <__ieee754_pow+0x26c>
 8004708:	f1b9 0f00 	cmp.w	r9, #0
 800470c:	dcef      	bgt.n	80046ee <__ieee754_pow+0x21e>
 800470e:	2000      	movs	r0, #0
 8004710:	b009      	add	sp, #36	; 0x24
 8004712:	ecbd 8b06 	vpop	{d8-d10}
 8004716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	f000 bcd7 	b.w	80050cc <__math_uflow>
 800471e:	bf00      	nop
 8004720:	fff00000 	.word	0xfff00000
 8004724:	7ff00000 	.word	0x7ff00000
 8004728:	433fffff 	.word	0x433fffff
 800472c:	3ff00000 	.word	0x3ff00000
 8004730:	3fefffff 	.word	0x3fefffff
 8004734:	3fe00000 	.word	0x3fe00000
 8004738:	41e00000 	.word	0x41e00000
 800473c:	4b60      	ldr	r3, [pc, #384]	; (80048c0 <__ieee754_pow+0x3f0>)
 800473e:	2200      	movs	r2, #0
 8004740:	f7fb fd5a 	bl	80001f8 <__aeabi_dsub>
 8004744:	a354      	add	r3, pc, #336	; (adr r3, 8004898 <__ieee754_pow+0x3c8>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	4604      	mov	r4, r0
 800474c:	460d      	mov	r5, r1
 800474e:	f7fb ff0b 	bl	8000568 <__aeabi_dmul>
 8004752:	a353      	add	r3, pc, #332	; (adr r3, 80048a0 <__ieee754_pow+0x3d0>)
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	4606      	mov	r6, r0
 800475a:	460f      	mov	r7, r1
 800475c:	4620      	mov	r0, r4
 800475e:	4629      	mov	r1, r5
 8004760:	f7fb ff02 	bl	8000568 <__aeabi_dmul>
 8004764:	4b57      	ldr	r3, [pc, #348]	; (80048c4 <__ieee754_pow+0x3f4>)
 8004766:	4682      	mov	sl, r0
 8004768:	468b      	mov	fp, r1
 800476a:	2200      	movs	r2, #0
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	f7fb fefa 	bl	8000568 <__aeabi_dmul>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	a14b      	add	r1, pc, #300	; (adr r1, 80048a8 <__ieee754_pow+0x3d8>)
 800477a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800477e:	f7fb fd3b 	bl	80001f8 <__aeabi_dsub>
 8004782:	4622      	mov	r2, r4
 8004784:	462b      	mov	r3, r5
 8004786:	f7fb feef 	bl	8000568 <__aeabi_dmul>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	2000      	movs	r0, #0
 8004790:	494d      	ldr	r1, [pc, #308]	; (80048c8 <__ieee754_pow+0x3f8>)
 8004792:	f7fb fd31 	bl	80001f8 <__aeabi_dsub>
 8004796:	4622      	mov	r2, r4
 8004798:	4680      	mov	r8, r0
 800479a:	4689      	mov	r9, r1
 800479c:	462b      	mov	r3, r5
 800479e:	4620      	mov	r0, r4
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7fb fee1 	bl	8000568 <__aeabi_dmul>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4640      	mov	r0, r8
 80047ac:	4649      	mov	r1, r9
 80047ae:	f7fb fedb 	bl	8000568 <__aeabi_dmul>
 80047b2:	a33f      	add	r3, pc, #252	; (adr r3, 80048b0 <__ieee754_pow+0x3e0>)
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f7fb fed6 	bl	8000568 <__aeabi_dmul>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4650      	mov	r0, sl
 80047c2:	4659      	mov	r1, fp
 80047c4:	f7fb fd18 	bl	80001f8 <__aeabi_dsub>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4680      	mov	r8, r0
 80047ce:	4689      	mov	r9, r1
 80047d0:	4630      	mov	r0, r6
 80047d2:	4639      	mov	r1, r7
 80047d4:	f7fb fd12 	bl	80001fc <__adddf3>
 80047d8:	2000      	movs	r0, #0
 80047da:	4632      	mov	r2, r6
 80047dc:	463b      	mov	r3, r7
 80047de:	4604      	mov	r4, r0
 80047e0:	460d      	mov	r5, r1
 80047e2:	f7fb fd09 	bl	80001f8 <__aeabi_dsub>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4640      	mov	r0, r8
 80047ec:	4649      	mov	r1, r9
 80047ee:	f7fb fd03 	bl	80001f8 <__aeabi_dsub>
 80047f2:	9b04      	ldr	r3, [sp, #16]
 80047f4:	9a06      	ldr	r2, [sp, #24]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	4682      	mov	sl, r0
 80047fc:	468b      	mov	fp, r1
 80047fe:	f040 81e7 	bne.w	8004bd0 <__ieee754_pow+0x700>
 8004802:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80048b8 <__ieee754_pow+0x3e8>
 8004806:	eeb0 8a47 	vmov.f32	s16, s14
 800480a:	eef0 8a67 	vmov.f32	s17, s15
 800480e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004812:	2600      	movs	r6, #0
 8004814:	4632      	mov	r2, r6
 8004816:	463b      	mov	r3, r7
 8004818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800481c:	f7fb fcec 	bl	80001f8 <__aeabi_dsub>
 8004820:	4622      	mov	r2, r4
 8004822:	462b      	mov	r3, r5
 8004824:	f7fb fea0 	bl	8000568 <__aeabi_dmul>
 8004828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800482c:	4680      	mov	r8, r0
 800482e:	4689      	mov	r9, r1
 8004830:	4650      	mov	r0, sl
 8004832:	4659      	mov	r1, fp
 8004834:	f7fb fe98 	bl	8000568 <__aeabi_dmul>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4640      	mov	r0, r8
 800483e:	4649      	mov	r1, r9
 8004840:	f7fb fcdc 	bl	80001fc <__adddf3>
 8004844:	4632      	mov	r2, r6
 8004846:	463b      	mov	r3, r7
 8004848:	4680      	mov	r8, r0
 800484a:	4689      	mov	r9, r1
 800484c:	4620      	mov	r0, r4
 800484e:	4629      	mov	r1, r5
 8004850:	f7fb fe8a 	bl	8000568 <__aeabi_dmul>
 8004854:	460b      	mov	r3, r1
 8004856:	4604      	mov	r4, r0
 8004858:	460d      	mov	r5, r1
 800485a:	4602      	mov	r2, r0
 800485c:	4649      	mov	r1, r9
 800485e:	4640      	mov	r0, r8
 8004860:	f7fb fccc 	bl	80001fc <__adddf3>
 8004864:	4b19      	ldr	r3, [pc, #100]	; (80048cc <__ieee754_pow+0x3fc>)
 8004866:	4299      	cmp	r1, r3
 8004868:	ec45 4b19 	vmov	d9, r4, r5
 800486c:	4606      	mov	r6, r0
 800486e:	460f      	mov	r7, r1
 8004870:	468b      	mov	fp, r1
 8004872:	f340 82f1 	ble.w	8004e58 <__ieee754_pow+0x988>
 8004876:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800487a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800487e:	4303      	orrs	r3, r0
 8004880:	f000 81e4 	beq.w	8004c4c <__ieee754_pow+0x77c>
 8004884:	ec51 0b18 	vmov	r0, r1, d8
 8004888:	2200      	movs	r2, #0
 800488a:	2300      	movs	r3, #0
 800488c:	f7fc f8de 	bl	8000a4c <__aeabi_dcmplt>
 8004890:	3800      	subs	r0, #0
 8004892:	bf18      	it	ne
 8004894:	2001      	movne	r0, #1
 8004896:	e72b      	b.n	80046f0 <__ieee754_pow+0x220>
 8004898:	60000000 	.word	0x60000000
 800489c:	3ff71547 	.word	0x3ff71547
 80048a0:	f85ddf44 	.word	0xf85ddf44
 80048a4:	3e54ae0b 	.word	0x3e54ae0b
 80048a8:	55555555 	.word	0x55555555
 80048ac:	3fd55555 	.word	0x3fd55555
 80048b0:	652b82fe 	.word	0x652b82fe
 80048b4:	3ff71547 	.word	0x3ff71547
 80048b8:	00000000 	.word	0x00000000
 80048bc:	bff00000 	.word	0xbff00000
 80048c0:	3ff00000 	.word	0x3ff00000
 80048c4:	3fd00000 	.word	0x3fd00000
 80048c8:	3fe00000 	.word	0x3fe00000
 80048cc:	408fffff 	.word	0x408fffff
 80048d0:	4bd5      	ldr	r3, [pc, #852]	; (8004c28 <__ieee754_pow+0x758>)
 80048d2:	402b      	ands	r3, r5
 80048d4:	2200      	movs	r2, #0
 80048d6:	b92b      	cbnz	r3, 80048e4 <__ieee754_pow+0x414>
 80048d8:	4bd4      	ldr	r3, [pc, #848]	; (8004c2c <__ieee754_pow+0x75c>)
 80048da:	f7fb fe45 	bl	8000568 <__aeabi_dmul>
 80048de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80048e2:	460c      	mov	r4, r1
 80048e4:	1523      	asrs	r3, r4, #20
 80048e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80048ea:	4413      	add	r3, r2
 80048ec:	9305      	str	r3, [sp, #20]
 80048ee:	4bd0      	ldr	r3, [pc, #832]	; (8004c30 <__ieee754_pow+0x760>)
 80048f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80048f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80048f8:	429c      	cmp	r4, r3
 80048fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80048fe:	dd08      	ble.n	8004912 <__ieee754_pow+0x442>
 8004900:	4bcc      	ldr	r3, [pc, #816]	; (8004c34 <__ieee754_pow+0x764>)
 8004902:	429c      	cmp	r4, r3
 8004904:	f340 8162 	ble.w	8004bcc <__ieee754_pow+0x6fc>
 8004908:	9b05      	ldr	r3, [sp, #20]
 800490a:	3301      	adds	r3, #1
 800490c:	9305      	str	r3, [sp, #20]
 800490e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004912:	2400      	movs	r4, #0
 8004914:	00e3      	lsls	r3, r4, #3
 8004916:	9307      	str	r3, [sp, #28]
 8004918:	4bc7      	ldr	r3, [pc, #796]	; (8004c38 <__ieee754_pow+0x768>)
 800491a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800491e:	ed93 7b00 	vldr	d7, [r3]
 8004922:	4629      	mov	r1, r5
 8004924:	ec53 2b17 	vmov	r2, r3, d7
 8004928:	eeb0 9a47 	vmov.f32	s18, s14
 800492c:	eef0 9a67 	vmov.f32	s19, s15
 8004930:	4682      	mov	sl, r0
 8004932:	f7fb fc61 	bl	80001f8 <__aeabi_dsub>
 8004936:	4652      	mov	r2, sl
 8004938:	4606      	mov	r6, r0
 800493a:	460f      	mov	r7, r1
 800493c:	462b      	mov	r3, r5
 800493e:	ec51 0b19 	vmov	r0, r1, d9
 8004942:	f7fb fc5b 	bl	80001fc <__adddf3>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	2000      	movs	r0, #0
 800494c:	49bb      	ldr	r1, [pc, #748]	; (8004c3c <__ieee754_pow+0x76c>)
 800494e:	f7fb ff35 	bl	80007bc <__aeabi_ddiv>
 8004952:	ec41 0b1a 	vmov	d10, r0, r1
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4630      	mov	r0, r6
 800495c:	4639      	mov	r1, r7
 800495e:	f7fb fe03 	bl	8000568 <__aeabi_dmul>
 8004962:	2300      	movs	r3, #0
 8004964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800496e:	46ab      	mov	fp, r5
 8004970:	106d      	asrs	r5, r5, #1
 8004972:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004976:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800497a:	ec41 0b18 	vmov	d8, r0, r1
 800497e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004982:	2200      	movs	r2, #0
 8004984:	4640      	mov	r0, r8
 8004986:	4649      	mov	r1, r9
 8004988:	4614      	mov	r4, r2
 800498a:	461d      	mov	r5, r3
 800498c:	f7fb fdec 	bl	8000568 <__aeabi_dmul>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4630      	mov	r0, r6
 8004996:	4639      	mov	r1, r7
 8004998:	f7fb fc2e 	bl	80001f8 <__aeabi_dsub>
 800499c:	ec53 2b19 	vmov	r2, r3, d9
 80049a0:	4606      	mov	r6, r0
 80049a2:	460f      	mov	r7, r1
 80049a4:	4620      	mov	r0, r4
 80049a6:	4629      	mov	r1, r5
 80049a8:	f7fb fc26 	bl	80001f8 <__aeabi_dsub>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4650      	mov	r0, sl
 80049b2:	4659      	mov	r1, fp
 80049b4:	f7fb fc20 	bl	80001f8 <__aeabi_dsub>
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	f7fb fdd4 	bl	8000568 <__aeabi_dmul>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4630      	mov	r0, r6
 80049c6:	4639      	mov	r1, r7
 80049c8:	f7fb fc16 	bl	80001f8 <__aeabi_dsub>
 80049cc:	ec53 2b1a 	vmov	r2, r3, d10
 80049d0:	f7fb fdca 	bl	8000568 <__aeabi_dmul>
 80049d4:	ec53 2b18 	vmov	r2, r3, d8
 80049d8:	ec41 0b19 	vmov	d9, r0, r1
 80049dc:	ec51 0b18 	vmov	r0, r1, d8
 80049e0:	f7fb fdc2 	bl	8000568 <__aeabi_dmul>
 80049e4:	a37c      	add	r3, pc, #496	; (adr r3, 8004bd8 <__ieee754_pow+0x708>)
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	4604      	mov	r4, r0
 80049ec:	460d      	mov	r5, r1
 80049ee:	f7fb fdbb 	bl	8000568 <__aeabi_dmul>
 80049f2:	a37b      	add	r3, pc, #492	; (adr r3, 8004be0 <__ieee754_pow+0x710>)
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f7fb fc00 	bl	80001fc <__adddf3>
 80049fc:	4622      	mov	r2, r4
 80049fe:	462b      	mov	r3, r5
 8004a00:	f7fb fdb2 	bl	8000568 <__aeabi_dmul>
 8004a04:	a378      	add	r3, pc, #480	; (adr r3, 8004be8 <__ieee754_pow+0x718>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb fbf7 	bl	80001fc <__adddf3>
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	f7fb fda9 	bl	8000568 <__aeabi_dmul>
 8004a16:	a376      	add	r3, pc, #472	; (adr r3, 8004bf0 <__ieee754_pow+0x720>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	f7fb fbee 	bl	80001fc <__adddf3>
 8004a20:	4622      	mov	r2, r4
 8004a22:	462b      	mov	r3, r5
 8004a24:	f7fb fda0 	bl	8000568 <__aeabi_dmul>
 8004a28:	a373      	add	r3, pc, #460	; (adr r3, 8004bf8 <__ieee754_pow+0x728>)
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f7fb fbe5 	bl	80001fc <__adddf3>
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	f7fb fd97 	bl	8000568 <__aeabi_dmul>
 8004a3a:	a371      	add	r3, pc, #452	; (adr r3, 8004c00 <__ieee754_pow+0x730>)
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fb fbdc 	bl	80001fc <__adddf3>
 8004a44:	4622      	mov	r2, r4
 8004a46:	4606      	mov	r6, r0
 8004a48:	460f      	mov	r7, r1
 8004a4a:	462b      	mov	r3, r5
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	4629      	mov	r1, r5
 8004a50:	f7fb fd8a 	bl	8000568 <__aeabi_dmul>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4630      	mov	r0, r6
 8004a5a:	4639      	mov	r1, r7
 8004a5c:	f7fb fd84 	bl	8000568 <__aeabi_dmul>
 8004a60:	4642      	mov	r2, r8
 8004a62:	4604      	mov	r4, r0
 8004a64:	460d      	mov	r5, r1
 8004a66:	464b      	mov	r3, r9
 8004a68:	ec51 0b18 	vmov	r0, r1, d8
 8004a6c:	f7fb fbc6 	bl	80001fc <__adddf3>
 8004a70:	ec53 2b19 	vmov	r2, r3, d9
 8004a74:	f7fb fd78 	bl	8000568 <__aeabi_dmul>
 8004a78:	4622      	mov	r2, r4
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	f7fb fbbe 	bl	80001fc <__adddf3>
 8004a80:	4642      	mov	r2, r8
 8004a82:	4682      	mov	sl, r0
 8004a84:	468b      	mov	fp, r1
 8004a86:	464b      	mov	r3, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	f7fb fd6c 	bl	8000568 <__aeabi_dmul>
 8004a90:	4b6b      	ldr	r3, [pc, #428]	; (8004c40 <__ieee754_pow+0x770>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	4606      	mov	r6, r0
 8004a96:	460f      	mov	r7, r1
 8004a98:	f7fb fbb0 	bl	80001fc <__adddf3>
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	465b      	mov	r3, fp
 8004aa0:	f7fb fbac 	bl	80001fc <__adddf3>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4640      	mov	r0, r8
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	f7fb fd59 	bl	8000568 <__aeabi_dmul>
 8004ab6:	4b62      	ldr	r3, [pc, #392]	; (8004c40 <__ieee754_pow+0x770>)
 8004ab8:	4680      	mov	r8, r0
 8004aba:	4689      	mov	r9, r1
 8004abc:	2200      	movs	r2, #0
 8004abe:	4620      	mov	r0, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f7fb fb99 	bl	80001f8 <__aeabi_dsub>
 8004ac6:	4632      	mov	r2, r6
 8004ac8:	463b      	mov	r3, r7
 8004aca:	f7fb fb95 	bl	80001f8 <__aeabi_dsub>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4650      	mov	r0, sl
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	f7fb fb8f 	bl	80001f8 <__aeabi_dsub>
 8004ada:	ec53 2b18 	vmov	r2, r3, d8
 8004ade:	f7fb fd43 	bl	8000568 <__aeabi_dmul>
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	460f      	mov	r7, r1
 8004ae8:	462b      	mov	r3, r5
 8004aea:	ec51 0b19 	vmov	r0, r1, d9
 8004aee:	f7fb fd3b 	bl	8000568 <__aeabi_dmul>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4630      	mov	r0, r6
 8004af8:	4639      	mov	r1, r7
 8004afa:	f7fb fb7f 	bl	80001fc <__adddf3>
 8004afe:	4606      	mov	r6, r0
 8004b00:	460f      	mov	r7, r1
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4640      	mov	r0, r8
 8004b08:	4649      	mov	r1, r9
 8004b0a:	f7fb fb77 	bl	80001fc <__adddf3>
 8004b0e:	a33e      	add	r3, pc, #248	; (adr r3, 8004c08 <__ieee754_pow+0x738>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	2000      	movs	r0, #0
 8004b16:	4604      	mov	r4, r0
 8004b18:	460d      	mov	r5, r1
 8004b1a:	f7fb fd25 	bl	8000568 <__aeabi_dmul>
 8004b1e:	4642      	mov	r2, r8
 8004b20:	ec41 0b18 	vmov	d8, r0, r1
 8004b24:	464b      	mov	r3, r9
 8004b26:	4620      	mov	r0, r4
 8004b28:	4629      	mov	r1, r5
 8004b2a:	f7fb fb65 	bl	80001f8 <__aeabi_dsub>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4630      	mov	r0, r6
 8004b34:	4639      	mov	r1, r7
 8004b36:	f7fb fb5f 	bl	80001f8 <__aeabi_dsub>
 8004b3a:	a335      	add	r3, pc, #212	; (adr r3, 8004c10 <__ieee754_pow+0x740>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fd12 	bl	8000568 <__aeabi_dmul>
 8004b44:	a334      	add	r3, pc, #208	; (adr r3, 8004c18 <__ieee754_pow+0x748>)
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	460f      	mov	r7, r1
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb fd09 	bl	8000568 <__aeabi_dmul>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	4639      	mov	r1, r7
 8004b5e:	f7fb fb4d 	bl	80001fc <__adddf3>
 8004b62:	9a07      	ldr	r2, [sp, #28]
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <__ieee754_pow+0x774>)
 8004b66:	4413      	add	r3, r2
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f7fb fb46 	bl	80001fc <__adddf3>
 8004b70:	4682      	mov	sl, r0
 8004b72:	9805      	ldr	r0, [sp, #20]
 8004b74:	468b      	mov	fp, r1
 8004b76:	f7fb fc8d 	bl	8000494 <__aeabi_i2d>
 8004b7a:	9a07      	ldr	r2, [sp, #28]
 8004b7c:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <__ieee754_pow+0x778>)
 8004b7e:	4413      	add	r3, r2
 8004b80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b84:	4606      	mov	r6, r0
 8004b86:	460f      	mov	r7, r1
 8004b88:	4652      	mov	r2, sl
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	ec51 0b18 	vmov	r0, r1, d8
 8004b90:	f7fb fb34 	bl	80001fc <__adddf3>
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	f7fb fb30 	bl	80001fc <__adddf3>
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	f7fb fb2c 	bl	80001fc <__adddf3>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	4632      	mov	r2, r6
 8004ba8:	463b      	mov	r3, r7
 8004baa:	4604      	mov	r4, r0
 8004bac:	460d      	mov	r5, r1
 8004bae:	f7fb fb23 	bl	80001f8 <__aeabi_dsub>
 8004bb2:	4642      	mov	r2, r8
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	f7fb fb1f 	bl	80001f8 <__aeabi_dsub>
 8004bba:	ec53 2b18 	vmov	r2, r3, d8
 8004bbe:	f7fb fb1b 	bl	80001f8 <__aeabi_dsub>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	4659      	mov	r1, fp
 8004bca:	e610      	b.n	80047ee <__ieee754_pow+0x31e>
 8004bcc:	2401      	movs	r4, #1
 8004bce:	e6a1      	b.n	8004914 <__ieee754_pow+0x444>
 8004bd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004c20 <__ieee754_pow+0x750>
 8004bd4:	e617      	b.n	8004806 <__ieee754_pow+0x336>
 8004bd6:	bf00      	nop
 8004bd8:	4a454eef 	.word	0x4a454eef
 8004bdc:	3fca7e28 	.word	0x3fca7e28
 8004be0:	93c9db65 	.word	0x93c9db65
 8004be4:	3fcd864a 	.word	0x3fcd864a
 8004be8:	a91d4101 	.word	0xa91d4101
 8004bec:	3fd17460 	.word	0x3fd17460
 8004bf0:	518f264d 	.word	0x518f264d
 8004bf4:	3fd55555 	.word	0x3fd55555
 8004bf8:	db6fabff 	.word	0xdb6fabff
 8004bfc:	3fdb6db6 	.word	0x3fdb6db6
 8004c00:	33333303 	.word	0x33333303
 8004c04:	3fe33333 	.word	0x3fe33333
 8004c08:	e0000000 	.word	0xe0000000
 8004c0c:	3feec709 	.word	0x3feec709
 8004c10:	dc3a03fd 	.word	0xdc3a03fd
 8004c14:	3feec709 	.word	0x3feec709
 8004c18:	145b01f5 	.word	0x145b01f5
 8004c1c:	be3e2fe0 	.word	0xbe3e2fe0
 8004c20:	00000000 	.word	0x00000000
 8004c24:	3ff00000 	.word	0x3ff00000
 8004c28:	7ff00000 	.word	0x7ff00000
 8004c2c:	43400000 	.word	0x43400000
 8004c30:	0003988e 	.word	0x0003988e
 8004c34:	000bb679 	.word	0x000bb679
 8004c38:	080052c0 	.word	0x080052c0
 8004c3c:	3ff00000 	.word	0x3ff00000
 8004c40:	40080000 	.word	0x40080000
 8004c44:	080052e0 	.word	0x080052e0
 8004c48:	080052d0 	.word	0x080052d0
 8004c4c:	a3b5      	add	r3, pc, #724	; (adr r3, 8004f24 <__ieee754_pow+0xa54>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	4640      	mov	r0, r8
 8004c54:	4649      	mov	r1, r9
 8004c56:	f7fb fad1 	bl	80001fc <__adddf3>
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	ec41 0b1a 	vmov	d10, r0, r1
 8004c60:	462b      	mov	r3, r5
 8004c62:	4630      	mov	r0, r6
 8004c64:	4639      	mov	r1, r7
 8004c66:	f7fb fac7 	bl	80001f8 <__aeabi_dsub>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	ec51 0b1a 	vmov	r0, r1, d10
 8004c72:	f7fb ff09 	bl	8000a88 <__aeabi_dcmpgt>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f47f ae04 	bne.w	8004884 <__ieee754_pow+0x3b4>
 8004c7c:	4aa4      	ldr	r2, [pc, #656]	; (8004f10 <__ieee754_pow+0xa40>)
 8004c7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f340 8108 	ble.w	8004e98 <__ieee754_pow+0x9c8>
 8004c88:	151b      	asrs	r3, r3, #20
 8004c8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004c8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004c92:	fa4a f303 	asr.w	r3, sl, r3
 8004c96:	445b      	add	r3, fp
 8004c98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004c9c:	4e9d      	ldr	r6, [pc, #628]	; (8004f14 <__ieee754_pow+0xa44>)
 8004c9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004ca2:	4116      	asrs	r6, r2
 8004ca4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004ca8:	2000      	movs	r0, #0
 8004caa:	ea23 0106 	bic.w	r1, r3, r6
 8004cae:	f1c2 0214 	rsb	r2, r2, #20
 8004cb2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004cb6:	fa4a fa02 	asr.w	sl, sl, r2
 8004cba:	f1bb 0f00 	cmp.w	fp, #0
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	bfb8      	it	lt
 8004cc8:	f1ca 0a00 	rsblt	sl, sl, #0
 8004ccc:	f7fb fa94 	bl	80001f8 <__aeabi_dsub>
 8004cd0:	ec41 0b19 	vmov	d9, r0, r1
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	ec51 0b19 	vmov	r0, r1, d9
 8004cdc:	f7fb fa8e 	bl	80001fc <__adddf3>
 8004ce0:	a37b      	add	r3, pc, #492	; (adr r3, 8004ed0 <__ieee754_pow+0xa00>)
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	4604      	mov	r4, r0
 8004cea:	460d      	mov	r5, r1
 8004cec:	f7fb fc3c 	bl	8000568 <__aeabi_dmul>
 8004cf0:	ec53 2b19 	vmov	r2, r3, d9
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	460f      	mov	r7, r1
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	f7fb fa7c 	bl	80001f8 <__aeabi_dsub>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4640      	mov	r0, r8
 8004d06:	4649      	mov	r1, r9
 8004d08:	f7fb fa76 	bl	80001f8 <__aeabi_dsub>
 8004d0c:	a372      	add	r3, pc, #456	; (adr r3, 8004ed8 <__ieee754_pow+0xa08>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f7fb fc29 	bl	8000568 <__aeabi_dmul>
 8004d16:	a372      	add	r3, pc, #456	; (adr r3, 8004ee0 <__ieee754_pow+0xa10>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	4689      	mov	r9, r1
 8004d20:	4620      	mov	r0, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7fb fc20 	bl	8000568 <__aeabi_dmul>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	4649      	mov	r1, r9
 8004d30:	f7fb fa64 	bl	80001fc <__adddf3>
 8004d34:	4604      	mov	r4, r0
 8004d36:	460d      	mov	r5, r1
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	4639      	mov	r1, r7
 8004d40:	f7fb fa5c 	bl	80001fc <__adddf3>
 8004d44:	4632      	mov	r2, r6
 8004d46:	463b      	mov	r3, r7
 8004d48:	4680      	mov	r8, r0
 8004d4a:	4689      	mov	r9, r1
 8004d4c:	f7fb fa54 	bl	80001f8 <__aeabi_dsub>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb fa4e 	bl	80001f8 <__aeabi_dsub>
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460f      	mov	r7, r1
 8004d62:	464b      	mov	r3, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	4649      	mov	r1, r9
 8004d68:	f7fb fbfe 	bl	8000568 <__aeabi_dmul>
 8004d6c:	a35e      	add	r3, pc, #376	; (adr r3, 8004ee8 <__ieee754_pow+0xa18>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
 8004d76:	f7fb fbf7 	bl	8000568 <__aeabi_dmul>
 8004d7a:	a35d      	add	r3, pc, #372	; (adr r3, 8004ef0 <__ieee754_pow+0xa20>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fa3a 	bl	80001f8 <__aeabi_dsub>
 8004d84:	4622      	mov	r2, r4
 8004d86:	462b      	mov	r3, r5
 8004d88:	f7fb fbee 	bl	8000568 <__aeabi_dmul>
 8004d8c:	a35a      	add	r3, pc, #360	; (adr r3, 8004ef8 <__ieee754_pow+0xa28>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f7fb fa33 	bl	80001fc <__adddf3>
 8004d96:	4622      	mov	r2, r4
 8004d98:	462b      	mov	r3, r5
 8004d9a:	f7fb fbe5 	bl	8000568 <__aeabi_dmul>
 8004d9e:	a358      	add	r3, pc, #352	; (adr r3, 8004f00 <__ieee754_pow+0xa30>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fa28 	bl	80001f8 <__aeabi_dsub>
 8004da8:	4622      	mov	r2, r4
 8004daa:	462b      	mov	r3, r5
 8004dac:	f7fb fbdc 	bl	8000568 <__aeabi_dmul>
 8004db0:	a355      	add	r3, pc, #340	; (adr r3, 8004f08 <__ieee754_pow+0xa38>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fa21 	bl	80001fc <__adddf3>
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	f7fb fbd3 	bl	8000568 <__aeabi_dmul>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	4649      	mov	r1, r9
 8004dca:	f7fb fa15 	bl	80001f8 <__aeabi_dsub>
 8004dce:	4604      	mov	r4, r0
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	4649      	mov	r1, r9
 8004dda:	f7fb fbc5 	bl	8000568 <__aeabi_dmul>
 8004dde:	2200      	movs	r2, #0
 8004de0:	ec41 0b19 	vmov	d9, r0, r1
 8004de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb fa04 	bl	80001f8 <__aeabi_dsub>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	ec51 0b19 	vmov	r0, r1, d9
 8004df8:	f7fb fce0 	bl	80007bc <__aeabi_ddiv>
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	4604      	mov	r4, r0
 8004e00:	460d      	mov	r5, r1
 8004e02:	463b      	mov	r3, r7
 8004e04:	4640      	mov	r0, r8
 8004e06:	4649      	mov	r1, r9
 8004e08:	f7fb fbae 	bl	8000568 <__aeabi_dmul>
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	463b      	mov	r3, r7
 8004e10:	f7fb f9f4 	bl	80001fc <__adddf3>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	f7fb f9ec 	bl	80001f8 <__aeabi_dsub>
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	f7fb f9e8 	bl	80001f8 <__aeabi_dsub>
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	493a      	ldr	r1, [pc, #232]	; (8004f18 <__ieee754_pow+0xa48>)
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7fb f9e2 	bl	80001f8 <__aeabi_dsub>
 8004e34:	ec41 0b10 	vmov	d0, r0, r1
 8004e38:	ee10 3a90 	vmov	r3, s1
 8004e3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e44:	da2b      	bge.n	8004e9e <__ieee754_pow+0x9ce>
 8004e46:	4650      	mov	r0, sl
 8004e48:	f000 f966 	bl	8005118 <scalbn>
 8004e4c:	ec51 0b10 	vmov	r0, r1, d0
 8004e50:	ec53 2b18 	vmov	r2, r3, d8
 8004e54:	f7ff bbed 	b.w	8004632 <__ieee754_pow+0x162>
 8004e58:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <__ieee754_pow+0xa4c>)
 8004e5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004e5e:	429e      	cmp	r6, r3
 8004e60:	f77f af0c 	ble.w	8004c7c <__ieee754_pow+0x7ac>
 8004e64:	4b2e      	ldr	r3, [pc, #184]	; (8004f20 <__ieee754_pow+0xa50>)
 8004e66:	440b      	add	r3, r1
 8004e68:	4303      	orrs	r3, r0
 8004e6a:	d009      	beq.n	8004e80 <__ieee754_pow+0x9b0>
 8004e6c:	ec51 0b18 	vmov	r0, r1, d8
 8004e70:	2200      	movs	r2, #0
 8004e72:	2300      	movs	r3, #0
 8004e74:	f7fb fdea 	bl	8000a4c <__aeabi_dcmplt>
 8004e78:	3800      	subs	r0, #0
 8004e7a:	bf18      	it	ne
 8004e7c:	2001      	movne	r0, #1
 8004e7e:	e447      	b.n	8004710 <__ieee754_pow+0x240>
 8004e80:	4622      	mov	r2, r4
 8004e82:	462b      	mov	r3, r5
 8004e84:	f7fb f9b8 	bl	80001f8 <__aeabi_dsub>
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	f7fb fdf2 	bl	8000a74 <__aeabi_dcmpge>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	f43f aef3 	beq.w	8004c7c <__ieee754_pow+0x7ac>
 8004e96:	e7e9      	b.n	8004e6c <__ieee754_pow+0x99c>
 8004e98:	f04f 0a00 	mov.w	sl, #0
 8004e9c:	e71a      	b.n	8004cd4 <__ieee754_pow+0x804>
 8004e9e:	ec51 0b10 	vmov	r0, r1, d0
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	e7d4      	b.n	8004e50 <__ieee754_pow+0x980>
 8004ea6:	491c      	ldr	r1, [pc, #112]	; (8004f18 <__ieee754_pow+0xa48>)
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f7ff bb30 	b.w	800450e <__ieee754_pow+0x3e>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	f7ff bb2c 	b.w	800450e <__ieee754_pow+0x3e>
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f7ff bb28 	b.w	800450e <__ieee754_pow+0x3e>
 8004ebe:	9204      	str	r2, [sp, #16]
 8004ec0:	f7ff bb7a 	b.w	80045b8 <__ieee754_pow+0xe8>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f7ff bb64 	b.w	8004592 <__ieee754_pow+0xc2>
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	00000000 	.word	0x00000000
 8004ed4:	3fe62e43 	.word	0x3fe62e43
 8004ed8:	fefa39ef 	.word	0xfefa39ef
 8004edc:	3fe62e42 	.word	0x3fe62e42
 8004ee0:	0ca86c39 	.word	0x0ca86c39
 8004ee4:	be205c61 	.word	0xbe205c61
 8004ee8:	72bea4d0 	.word	0x72bea4d0
 8004eec:	3e663769 	.word	0x3e663769
 8004ef0:	c5d26bf1 	.word	0xc5d26bf1
 8004ef4:	3ebbbd41 	.word	0x3ebbbd41
 8004ef8:	af25de2c 	.word	0xaf25de2c
 8004efc:	3f11566a 	.word	0x3f11566a
 8004f00:	16bebd93 	.word	0x16bebd93
 8004f04:	3f66c16c 	.word	0x3f66c16c
 8004f08:	5555553e 	.word	0x5555553e
 8004f0c:	3fc55555 	.word	0x3fc55555
 8004f10:	3fe00000 	.word	0x3fe00000
 8004f14:	000fffff 	.word	0x000fffff
 8004f18:	3ff00000 	.word	0x3ff00000
 8004f1c:	4090cbff 	.word	0x4090cbff
 8004f20:	3f6f3400 	.word	0x3f6f3400
 8004f24:	652b82fe 	.word	0x652b82fe
 8004f28:	3c971547 	.word	0x3c971547

08004f2c <__ieee754_sqrt>:
 8004f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f30:	ec55 4b10 	vmov	r4, r5, d0
 8004f34:	4e55      	ldr	r6, [pc, #340]	; (800508c <__ieee754_sqrt+0x160>)
 8004f36:	43ae      	bics	r6, r5
 8004f38:	ee10 0a10 	vmov	r0, s0
 8004f3c:	ee10 3a10 	vmov	r3, s0
 8004f40:	462a      	mov	r2, r5
 8004f42:	4629      	mov	r1, r5
 8004f44:	d110      	bne.n	8004f68 <__ieee754_sqrt+0x3c>
 8004f46:	ee10 2a10 	vmov	r2, s0
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	f7fb fb0c 	bl	8000568 <__aeabi_dmul>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4620      	mov	r0, r4
 8004f56:	4629      	mov	r1, r5
 8004f58:	f7fb f950 	bl	80001fc <__adddf3>
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	460d      	mov	r5, r1
 8004f60:	ec45 4b10 	vmov	d0, r4, r5
 8004f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f68:	2d00      	cmp	r5, #0
 8004f6a:	dc10      	bgt.n	8004f8e <__ieee754_sqrt+0x62>
 8004f6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004f70:	4330      	orrs	r0, r6
 8004f72:	d0f5      	beq.n	8004f60 <__ieee754_sqrt+0x34>
 8004f74:	b15d      	cbz	r5, 8004f8e <__ieee754_sqrt+0x62>
 8004f76:	ee10 2a10 	vmov	r2, s0
 8004f7a:	462b      	mov	r3, r5
 8004f7c:	ee10 0a10 	vmov	r0, s0
 8004f80:	f7fb f93a 	bl	80001f8 <__aeabi_dsub>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	f7fb fc18 	bl	80007bc <__aeabi_ddiv>
 8004f8c:	e7e6      	b.n	8004f5c <__ieee754_sqrt+0x30>
 8004f8e:	1512      	asrs	r2, r2, #20
 8004f90:	d074      	beq.n	800507c <__ieee754_sqrt+0x150>
 8004f92:	07d4      	lsls	r4, r2, #31
 8004f94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004f98:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004fa0:	bf5e      	ittt	pl
 8004fa2:	0fda      	lsrpl	r2, r3, #31
 8004fa4:	005b      	lslpl	r3, r3, #1
 8004fa6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004faa:	2400      	movs	r4, #0
 8004fac:	0fda      	lsrs	r2, r3, #31
 8004fae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004fb2:	107f      	asrs	r7, r7, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	2516      	movs	r5, #22
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fbe:	1886      	adds	r6, r0, r2
 8004fc0:	428e      	cmp	r6, r1
 8004fc2:	bfde      	ittt	le
 8004fc4:	1b89      	suble	r1, r1, r6
 8004fc6:	18b0      	addle	r0, r6, r2
 8004fc8:	18a4      	addle	r4, r4, r2
 8004fca:	0049      	lsls	r1, r1, #1
 8004fcc:	3d01      	subs	r5, #1
 8004fce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004fd2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004fd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004fda:	d1f0      	bne.n	8004fbe <__ieee754_sqrt+0x92>
 8004fdc:	462a      	mov	r2, r5
 8004fde:	f04f 0e20 	mov.w	lr, #32
 8004fe2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004fe6:	4281      	cmp	r1, r0
 8004fe8:	eb06 0c05 	add.w	ip, r6, r5
 8004fec:	dc02      	bgt.n	8004ff4 <__ieee754_sqrt+0xc8>
 8004fee:	d113      	bne.n	8005018 <__ieee754_sqrt+0xec>
 8004ff0:	459c      	cmp	ip, r3
 8004ff2:	d811      	bhi.n	8005018 <__ieee754_sqrt+0xec>
 8004ff4:	f1bc 0f00 	cmp.w	ip, #0
 8004ff8:	eb0c 0506 	add.w	r5, ip, r6
 8004ffc:	da43      	bge.n	8005086 <__ieee754_sqrt+0x15a>
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	db41      	blt.n	8005086 <__ieee754_sqrt+0x15a>
 8005002:	f100 0801 	add.w	r8, r0, #1
 8005006:	1a09      	subs	r1, r1, r0
 8005008:	459c      	cmp	ip, r3
 800500a:	bf88      	it	hi
 800500c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8005010:	eba3 030c 	sub.w	r3, r3, ip
 8005014:	4432      	add	r2, r6
 8005016:	4640      	mov	r0, r8
 8005018:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800501c:	f1be 0e01 	subs.w	lr, lr, #1
 8005020:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005024:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005028:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800502c:	d1db      	bne.n	8004fe6 <__ieee754_sqrt+0xba>
 800502e:	430b      	orrs	r3, r1
 8005030:	d006      	beq.n	8005040 <__ieee754_sqrt+0x114>
 8005032:	1c50      	adds	r0, r2, #1
 8005034:	bf13      	iteet	ne
 8005036:	3201      	addne	r2, #1
 8005038:	3401      	addeq	r4, #1
 800503a:	4672      	moveq	r2, lr
 800503c:	f022 0201 	bicne.w	r2, r2, #1
 8005040:	1063      	asrs	r3, r4, #1
 8005042:	0852      	lsrs	r2, r2, #1
 8005044:	07e1      	lsls	r1, r4, #31
 8005046:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800504a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800504e:	bf48      	it	mi
 8005050:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005054:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005058:	4614      	mov	r4, r2
 800505a:	e781      	b.n	8004f60 <__ieee754_sqrt+0x34>
 800505c:	0ad9      	lsrs	r1, r3, #11
 800505e:	3815      	subs	r0, #21
 8005060:	055b      	lsls	r3, r3, #21
 8005062:	2900      	cmp	r1, #0
 8005064:	d0fa      	beq.n	800505c <__ieee754_sqrt+0x130>
 8005066:	02cd      	lsls	r5, r1, #11
 8005068:	d50a      	bpl.n	8005080 <__ieee754_sqrt+0x154>
 800506a:	f1c2 0420 	rsb	r4, r2, #32
 800506e:	fa23 f404 	lsr.w	r4, r3, r4
 8005072:	1e55      	subs	r5, r2, #1
 8005074:	4093      	lsls	r3, r2
 8005076:	4321      	orrs	r1, r4
 8005078:	1b42      	subs	r2, r0, r5
 800507a:	e78a      	b.n	8004f92 <__ieee754_sqrt+0x66>
 800507c:	4610      	mov	r0, r2
 800507e:	e7f0      	b.n	8005062 <__ieee754_sqrt+0x136>
 8005080:	0049      	lsls	r1, r1, #1
 8005082:	3201      	adds	r2, #1
 8005084:	e7ef      	b.n	8005066 <__ieee754_sqrt+0x13a>
 8005086:	4680      	mov	r8, r0
 8005088:	e7bd      	b.n	8005006 <__ieee754_sqrt+0xda>
 800508a:	bf00      	nop
 800508c:	7ff00000 	.word	0x7ff00000

08005090 <with_errno>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	4604      	mov	r4, r0
 8005094:	460d      	mov	r5, r1
 8005096:	4616      	mov	r6, r2
 8005098:	f7ff f978 	bl	800438c <__errno>
 800509c:	4629      	mov	r1, r5
 800509e:	6006      	str	r6, [r0, #0]
 80050a0:	4620      	mov	r0, r4
 80050a2:	bd70      	pop	{r4, r5, r6, pc}

080050a4 <xflow>:
 80050a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050a6:	4614      	mov	r4, r2
 80050a8:	461d      	mov	r5, r3
 80050aa:	b108      	cbz	r0, 80050b0 <xflow+0xc>
 80050ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050b0:	e9cd 2300 	strd	r2, r3, [sp]
 80050b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050b8:	4620      	mov	r0, r4
 80050ba:	4629      	mov	r1, r5
 80050bc:	f7fb fa54 	bl	8000568 <__aeabi_dmul>
 80050c0:	2222      	movs	r2, #34	; 0x22
 80050c2:	b003      	add	sp, #12
 80050c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c8:	f7ff bfe2 	b.w	8005090 <with_errno>

080050cc <__math_uflow>:
 80050cc:	b508      	push	{r3, lr}
 80050ce:	2200      	movs	r2, #0
 80050d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050d4:	f7ff ffe6 	bl	80050a4 <xflow>
 80050d8:	ec41 0b10 	vmov	d0, r0, r1
 80050dc:	bd08      	pop	{r3, pc}

080050de <__math_oflow>:
 80050de:	b508      	push	{r3, lr}
 80050e0:	2200      	movs	r2, #0
 80050e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80050e6:	f7ff ffdd 	bl	80050a4 <xflow>
 80050ea:	ec41 0b10 	vmov	d0, r0, r1
 80050ee:	bd08      	pop	{r3, pc}

080050f0 <fabs>:
 80050f0:	ec51 0b10 	vmov	r0, r1, d0
 80050f4:	ee10 2a10 	vmov	r2, s0
 80050f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050fc:	ec43 2b10 	vmov	d0, r2, r3
 8005100:	4770      	bx	lr

08005102 <finite>:
 8005102:	b082      	sub	sp, #8
 8005104:	ed8d 0b00 	vstr	d0, [sp]
 8005108:	9801      	ldr	r0, [sp, #4]
 800510a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800510e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005112:	0fc0      	lsrs	r0, r0, #31
 8005114:	b002      	add	sp, #8
 8005116:	4770      	bx	lr

08005118 <scalbn>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	ec55 4b10 	vmov	r4, r5, d0
 800511e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005122:	4606      	mov	r6, r0
 8005124:	462b      	mov	r3, r5
 8005126:	b99a      	cbnz	r2, 8005150 <scalbn+0x38>
 8005128:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800512c:	4323      	orrs	r3, r4
 800512e:	d036      	beq.n	800519e <scalbn+0x86>
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <scalbn+0x100>)
 8005132:	4629      	mov	r1, r5
 8005134:	ee10 0a10 	vmov	r0, s0
 8005138:	2200      	movs	r2, #0
 800513a:	f7fb fa15 	bl	8000568 <__aeabi_dmul>
 800513e:	4b37      	ldr	r3, [pc, #220]	; (800521c <scalbn+0x104>)
 8005140:	429e      	cmp	r6, r3
 8005142:	4604      	mov	r4, r0
 8005144:	460d      	mov	r5, r1
 8005146:	da10      	bge.n	800516a <scalbn+0x52>
 8005148:	a32b      	add	r3, pc, #172	; (adr r3, 80051f8 <scalbn+0xe0>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	e03a      	b.n	80051c6 <scalbn+0xae>
 8005150:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005154:	428a      	cmp	r2, r1
 8005156:	d10c      	bne.n	8005172 <scalbn+0x5a>
 8005158:	ee10 2a10 	vmov	r2, s0
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb f84c 	bl	80001fc <__adddf3>
 8005164:	4604      	mov	r4, r0
 8005166:	460d      	mov	r5, r1
 8005168:	e019      	b.n	800519e <scalbn+0x86>
 800516a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800516e:	460b      	mov	r3, r1
 8005170:	3a36      	subs	r2, #54	; 0x36
 8005172:	4432      	add	r2, r6
 8005174:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005178:	428a      	cmp	r2, r1
 800517a:	dd08      	ble.n	800518e <scalbn+0x76>
 800517c:	2d00      	cmp	r5, #0
 800517e:	a120      	add	r1, pc, #128	; (adr r1, 8005200 <scalbn+0xe8>)
 8005180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005184:	da1c      	bge.n	80051c0 <scalbn+0xa8>
 8005186:	a120      	add	r1, pc, #128	; (adr r1, 8005208 <scalbn+0xf0>)
 8005188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800518c:	e018      	b.n	80051c0 <scalbn+0xa8>
 800518e:	2a00      	cmp	r2, #0
 8005190:	dd08      	ble.n	80051a4 <scalbn+0x8c>
 8005192:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800519a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800519e:	ec45 4b10 	vmov	d0, r4, r5
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
 80051a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80051a8:	da19      	bge.n	80051de <scalbn+0xc6>
 80051aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80051ae:	429e      	cmp	r6, r3
 80051b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80051b4:	dd0a      	ble.n	80051cc <scalbn+0xb4>
 80051b6:	a112      	add	r1, pc, #72	; (adr r1, 8005200 <scalbn+0xe8>)
 80051b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e2      	bne.n	8005186 <scalbn+0x6e>
 80051c0:	a30f      	add	r3, pc, #60	; (adr r3, 8005200 <scalbn+0xe8>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f7fb f9cf 	bl	8000568 <__aeabi_dmul>
 80051ca:	e7cb      	b.n	8005164 <scalbn+0x4c>
 80051cc:	a10a      	add	r1, pc, #40	; (adr r1, 80051f8 <scalbn+0xe0>)
 80051ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0b8      	beq.n	8005148 <scalbn+0x30>
 80051d6:	a10e      	add	r1, pc, #56	; (adr r1, 8005210 <scalbn+0xf8>)
 80051d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051dc:	e7b4      	b.n	8005148 <scalbn+0x30>
 80051de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80051e2:	3236      	adds	r2, #54	; 0x36
 80051e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80051ec:	4620      	mov	r0, r4
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <scalbn+0x108>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	e7e8      	b.n	80051c6 <scalbn+0xae>
 80051f4:	f3af 8000 	nop.w
 80051f8:	c2f8f359 	.word	0xc2f8f359
 80051fc:	01a56e1f 	.word	0x01a56e1f
 8005200:	8800759c 	.word	0x8800759c
 8005204:	7e37e43c 	.word	0x7e37e43c
 8005208:	8800759c 	.word	0x8800759c
 800520c:	fe37e43c 	.word	0xfe37e43c
 8005210:	c2f8f359 	.word	0xc2f8f359
 8005214:	81a56e1f 	.word	0x81a56e1f
 8005218:	43500000 	.word	0x43500000
 800521c:	ffff3cb0 	.word	0xffff3cb0
 8005220:	3c900000 	.word	0x3c900000

08005224 <_init>:
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	bf00      	nop
 8005228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522a:	bc08      	pop	{r3}
 800522c:	469e      	mov	lr, r3
 800522e:	4770      	bx	lr

08005230 <_fini>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	bf00      	nop
 8005234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005236:	bc08      	pop	{r3}
 8005238:	469e      	mov	lr, r3
 800523a:	4770      	bx	lr
